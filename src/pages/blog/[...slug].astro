---
import { getCollection } from 'astro:content';
import BlogPostLayout from '../../layouts/BlogPostLayout.astro';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  
  // Filter posts to ensure pubDate exists and is valid
  const validPosts = allPosts.filter(post => {
    const hasPubDate = post?.data?.pubDate && post.data.pubDate instanceof Date;
    if (!hasPubDate) {
      console.warn(`[getStaticPaths] Filtering out post with invalid/missing pubDate: ${post.slug}`);
    }
    return hasPubDate;
  });
  
  return validPosts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Type definition - update 'any' with CollectionEntry<'blog'> for better type safety
import type { CollectionEntry } from 'astro:content'; 
type Props = {
  post: CollectionEntry<"blog">;
};

const { post } = Astro.props;

// Safety check (kept just in case, though filtering should prevent this)
if (!post || !post.data) {
  console.error(`[Render] Error rendering post: Slug ${Astro.params.slug} - post or post.data is undefined.`);
  return new Response(null, { status: 500, statusText: 'Internal Server Error - Invalid post data' }); 
}

const { Content } = await post.render();
---

<BlogPostLayout post={post}>
  <Content />
</BlogPostLayout> 