---
/**
 * Dynamic Home Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * The content is rendered based on the language detected from the URL.
 */
import MainLayout from '../../layouts/MainLayout.astro';
// Keeping imports minimal - only using what we need
import { useTranslations, languages, getProfileStrings } from '../../i18n/utils';
import PageHeader from '../../components/PageHeader.astro';
import LatestPosts from '../../components/LatestPosts.astro';
import '../../styles/pages/home.css';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Ensure languages object is available and has at least English
const supportedLanguages = { ...languages };
if (!('en' in supportedLanguages)) {
  supportedLanguages['en'] = 'English';
}

// Validate the lang parameter - if invalid, redirect to English
const validLang = lang && (lang in supportedLanguages) ? lang : 'en';

// If the requested language is invalid, redirect to English
if (validLang !== lang) {
  console.log(`Invalid language '${lang}' requested, redirecting to English`);
  return Astro.redirect('/en/');
}

// Get translations for the current language
const t = useTranslations(validLang);

// Load profile data based on language
let profileData: Record<string, any> | null = null;
try {
  profileData = await getProfileStrings(validLang);
  console.log(`Home - Loaded profile data for language: ${validLang}`);
} catch (error) {
  console.error(`Home - Error loading profile data for language: ${validLang}`, error);
  // profileData is already initialized as null
}

// Export a prerender function for static site generation
export async function getStaticPaths() {
  // Import the language list directly to ensure it's loaded
  const { getSupportedLanguages } = await import('../../i18n/utils');
  const dynamicLanguages = await getSupportedLanguages();
  
  // Generate paths for each language
  return Object.keys(dynamicLanguages).map(lang => ({
    params: { lang }
  }));
}
---

<MainLayout 
  title={profileData?.site?.siteName} 
  description={profileData?.site?.siteDescription}
  currentLanguage={validLang}
>
  <main class="container home-container">
    {!profileData && (
      <div class="error-message">
        {t('errors.profileDataMissing')}
      </div>
    )}
    
    <PageHeader profileData={profileData} currentLanguage={validLang}>
      <div class="header-description">
        {profileData?.hero && profileData.hero.map((paragraph: string) => (
          <p>{paragraph}</p>
        ))}
      </div>
    </PageHeader>
    
    <div class="home-content">
      <!-- Latest Posts Section -->
      <LatestPosts lang={validLang} />
    </div>
  </main>
</MainLayout>