---
/**
 * Dynamic Home Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * The content is rendered based on the language detected from the URL.
 */
import MainLayout from '../../layouts/MainLayout.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages, getUIStrings, getProfileStrings } from '../../i18n/utils';
import SideProjects from '../../components/SideProjects.astro';
import PageHeader from '../../components/PageHeader.astro';
import { getCollection } from 'astro:content';
import '../../styles/home.css';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Ensure languages object is available and has at least English
const supportedLanguages = { ...languages };
if (!('en' in supportedLanguages)) {
  supportedLanguages['en'] = 'English';
}

// Validate the lang parameter - if invalid, redirect to English
const validLang = lang && (lang in supportedLanguages) ? lang : 'en';

// If the requested language is invalid, redirect to English
if (validLang !== lang) {
  console.log(`Invalid language '${lang}' requested, redirecting to English`);
  return Astro.redirect('/en/');
}

// Get translations for the current language
const t = useTranslations(validLang);

// Load dynamic UI strings with error handling
let uiStrings;
try {
  uiStrings = await getUIStrings(validLang);
} catch (error) {
  console.error(`Error loading UI strings for ${validLang}:`, error);
  uiStrings = {}; // Fallback to empty object
}

// Load profile data based on language
let profileData;
try {
  profileData = await getProfileStrings(validLang);
  console.log(`Home - Loaded profile data for language: ${validLang}`);
} catch (error) {
  console.error(`Home - Error loading profile data for language: ${validLang}`, error);
  profileData = null;
}

// Export a prerender function for static site generation
export async function getStaticPaths() {
  // Ensure we always generate the English version
  const paths = [{ params: { lang: 'en' } }];
  
  // Add other languages if available
  Object.keys(languages).forEach(lang => {
    if (lang !== 'en') {
      paths.push({ params: { lang } });
    }
  });
  
  return paths;
}
---

<MainLayout 
  title={profileData?.['site.title']} 
  description={profileData?.['site.description']}
  currentLanguage={validLang}
>
  <main class="home-container">
    {!profileData && (
      <div class="error-message">
        {t('errors.profileDataMissing')}
      </div>
    )}
    
    <PageHeader profileData={profileData}>
      <div class="header-description">
        {profileData?.hero && profileData.hero.map((paragraph: string) => (
          <p>{paragraph}</p>
        ))}
      </div>
    </PageHeader>
    
    <SideProjects
      title={t('sideProjects.title')}
      profileData={profileData}
      currentLanguage={validLang}
    />
  </main>
</MainLayout>