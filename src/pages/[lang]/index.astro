---
/**
 * Dynamic Home Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * The content is rendered based on the language detected from the URL.
 */
import MainLayout from '../../layouts/MainLayout.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages, getUIStrings } from '../../i18n/utils';
import SideProjects from '../../components/SideProjects.astro';
import PageHeader from '../../components/PageHeader.astro';
import { getCollection } from 'astro:content';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Validate the lang parameter - if invalid, redirect to the default language
if (!lang || !(lang in languages)) {
  return Astro.redirect(`/${defaultLang}`);
}

// Get translations for the current language
const t = useTranslations(lang as keyof typeof languages);

// Load dynamic UI strings
const uiStrings = await getUIStrings(lang as keyof typeof languages);

// Get profile data from content collection for the specific language
const profileCollection = await getCollection('profile', (entry) => entry.data.language === lang);
const profileInfo = profileCollection.length > 0 ? profileCollection[0].data : null;

// Get reCAPTCHA key from environment variable
const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;

// Export a prerender function for static site generation
export async function getStaticPaths() {
  return Object.keys(languages).map(lang => ({ params: { lang } }));
}
---

<MainLayout 
  title={uiStrings['site.title'] || "Ricardo Almeida | Personal Website"} 
  currentLanguage={lang as keyof typeof languages}
>
  <main class="home-container">
    <PageHeader profileData={profileInfo} currentLanguage={lang as keyof typeof languages}>
      {profileInfo?.hero && profileInfo.hero.map((paragraph: string) => (
        <p>{paragraph}</p>
      ))}
    </PageHeader>

    <div class="contact-reveal-container">
      <p id="home-contact-email" class="contact-email hidden">{import.meta.env.PUBLIC_CONTACT_EMAIL || 'contact@example.com'}</p>
      <p id="home-recaptcha-terms" class="recaptcha-terms hidden">
        {uiStrings['contact.recaptcha.prefix'] || ''}
        {' '}
        <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer">
          {uiStrings['contact.recaptcha.privacy'] || ''}
        </a>{' & '}
        <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer">
          {uiStrings['contact.recaptcha.terms'] || ''}
        </a>{' '}
        {uiStrings['contact.recaptcha.suffix'] || ''}
      </p>
    </div>

    <SideProjects />
  </main>
</MainLayout>

<style>
  .home-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 4rem 0;
    min-height: calc(100vh - 150px);
    animation: fadeIn 0.5s ease-out;
  }
  
  /* Hero Section */
  .hero-section {
    margin-bottom: 0;
    padding: 0;
  }
  
  .hero-content {
    margin: 0 auto;
  }
  
  .profile-circle {
    width: 120px;
    height: 120px;
    margin: 0 auto 2rem;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid var(--color-cosmic-latte);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .profile-circle:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
  }
  
  .profile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .hero-title {
    text-align: center;
    font-size: var(--font-size-3xl);
    margin-bottom: 0.5rem;
    font-family: var(--font-family-title);
  }
  
  .hero-subtitle {
    text-align: center;
    font-size: var(--font-size-lg);
    color: var(--color-cosmic-latte);
    margin-bottom: 1.5rem;
    font-weight: var(--font-weight-medium);
    font-family: var(--font-family-title);
  }
  
  .hero-description {
    margin-bottom: 2rem;
    margin-left: auto;
    margin-right: auto;
    font-family: var(--font-family-base);
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE/Edge */
    user-select: none;
  }
  
  .hero-description p {
    margin-bottom: 1rem;
    line-height: var(--line-height-loose);
    text-align: left;
  }
  
  .hero-social-links {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-top: 0.5rem;
    margin-bottom: 1.5rem;
  }
  
  .hero-social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-base);
    border-radius: 50%;
    padding: 0.3rem;
    background-color: rgba(255, 255, 255, 0.05);
    width: 24px;
    height: 24px;
  }
  
  .hero-social-link:hover {
    transform: translateY(-2px);
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .hero-social-link:hover .social-icon {
    transform: scale(1.1);
  }
  
  .hero-cta {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .primary-button, 
  .secondary-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: var(--font-weight-medium);
    transition: all var(--transition-base);
    text-decoration: none;
    font-family: var(--font-family-title);
  }
  
  .primary-button {
    background-color: var(--color-cosmic-latte-10);
    color: var(--color-white);
    border: 1px solid var(--color-cosmic-latte);
  }
  
  .primary-button:hover {
    background-color: var(--color-cosmic-latte-20);
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
  }
  
  .secondary-button {
    background-color: transparent;
    color: var(--color-white);
    border: 1px solid var(--color-gray-300);
  }
  
  .secondary-button:hover {
    border-color: var(--color-cosmic-latte);
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
  }
  
  /* Media Queries */
  @media (max-width: 768px) {
    .hero-section {
      flex-direction: column-reverse;
      gap: 2rem;
    }
    
    .home-container {
      padding: 4rem 1.5rem;
    }
    
    .hero-image-container {
      max-width: 100%;
    }
    
    .hero-title {
      font-size: var(--font-size-2xl);
    }
    
    .hero-subtitle {
      font-size: var(--font-size-lg);
    }
  }
  
  @media (max-width: 480px) {
    .home-container {
      padding: 4rem 1.25rem;
    }
    
    .gallery-item {
      flex: 0 0 200px;
      height: 150px;
    }
  }

  /* Add styles for hidden contact elements */
  /* Use more specific selectors */
  #home-contact-email.hidden,
  #home-recaptcha-terms.hidden,
  #home-contact-btn.hidden {
    display: none;
  }

  .contact-email {
    margin-top: 1rem;
    font-size: var(--font-size-lg);
    text-align: center;
    -webkit-user-select: all; /* Safari */
    -moz-user-select: all; /* Firefox */
    -ms-user-select: all; /* IE/Edge */
    user-select: all; /* Allow easy copying */
    background-color: var(--color-gray-800);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    display: inline-block; /* Center block */
  }

  .recaptcha-terms {
    font-size: var(--font-size-xs);
    color: var(--color-gray-400);
    margin-top: 0.5rem;
    text-align: center;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  .contact-reveal-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 1rem;
  }
  
  .hero-cta button.primary-button {
    cursor: pointer; /* Make button look clickable */
    /* Inherits other styles from .primary-button */
  }

  /* Name tooltip styles */
  .name-tooltip {
    position: relative;
    cursor: help;
  }

  .name-tooltip .tooltip-text {
    position: absolute;
    visibility: hidden;
    width: 300px;
    background-color: rgba(0, 0, 0, 0.8);
    color: var(--color-white);
    text-align: center;
    padding: 10px;
    border-radius: 6px;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 0.3s;
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-regular);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    border: 1px solid var(--color-cosmic-latte-10);
  }

  .name-tooltip .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
  }

  .name-tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
  }

  @media (max-width: 768px) {
    .name-tooltip .tooltip-text {
      width: 250px;
    }
  }
</style>

<script is:inline define:vars={{ 
  recaptchaSiteKey, 
  verifyingText: t('contact.verifying'), 
  errorAlertText: lang === 'en' ? 'Verification failed. Please try again.' : 'Falha na verificação. Por favor, tente novamente.', 
  recaptchaErrorAlertText: lang === 'en' ? 'Could not initiate verification. Please ensure you are online.' : 'Não foi possível iniciar a verificação. Verifique se está online.' 
}}>
  // Race condition prevention for reCAPTCHA
  if(typeof grecaptcha === 'undefined') {
    grecaptcha = {};
  }
  grecaptcha.ready = function(cb){
    if(typeof grecaptcha === 'undefined') {
      const c = '___grecaptcha_cfg';
      window[c] = window[c] || {};
      (window[c]['fns'] = window[c]['fns']||[]).push(cb);
    } else {
      cb();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.gallery-container');
    const track = document.querySelector('.gallery-track');
    if (!container || !track) return;

    let isDragging = false;
    let startX = 0;
    let scrollLeft = 0;

    const handleDragStart = (clientX) => {
      isDragging = true;
      container.classList.add('active');
      startX = clientX - container.offsetLeft;
      scrollLeft = container.scrollLeft;
    };

    const handleDragEnd = () => {
      isDragging = false;
      container.classList.remove('active');
    };

    const handleDragMove = (clientX) => {
      if (!isDragging) return;
      const x = clientX - container.offsetLeft;
      const walk = (x - startX) * 2;
      container.scrollLeft = scrollLeft - walk;
    };

    // Mouse events
    container.addEventListener('mousedown', (e) => {
      e.preventDefault();
      handleDragStart(e.pageX);
    });

    container.addEventListener('mouseleave', () => handleDragEnd());
    container.addEventListener('mouseup', () => handleDragEnd());

    container.addEventListener('mousemove', (e) => {
      e.preventDefault();
      handleDragMove(e.pageX);
    });

    // Touch events
    container.addEventListener('touchstart', (e) => {
      e.preventDefault();
      handleDragStart(e.touches[0].pageX);
    });

    container.addEventListener('touchend', () => handleDragEnd());

    container.addEventListener('touchmove', (e) => {
      handleDragMove(e.touches[0].pageX);
    });
  });
  
  // Contact button handling
  document.addEventListener('DOMContentLoaded', () => {
    const contactBtn = document.getElementById('home-contact-btn');
    const contactEmail = document.getElementById('home-contact-email');
    const recaptchaTerms = document.getElementById('home-recaptcha-terms');
    
    if (contactBtn) {
      contactBtn.addEventListener('click', async () => {
        try {
          if (!contactEmail || !recaptchaTerms) return;
          
          contactBtn.textContent = verifyingText;
          contactBtn.disabled = true;
          
          if (!window.grecaptcha) {
            alert(recaptchaErrorAlertText);
            contactBtn.textContent = originalBtnText;
            contactBtn.disabled = false;
            return;
          }
          
          const token = await grecaptcha.execute(recaptchaSiteKey, {action: 'contact'});
          
          // Simple validation - in a real app, you'd verify this server-side
          if (token && token.length > 10) {
            contactEmail.classList.remove('hidden');
            recaptchaTerms.classList.remove('hidden');
            contactBtn.classList.add('hidden');
          } else {
            throw new Error('Verification failed');
          }
        } catch (error) {
          console.error('reCAPTCHA error:', error);
          alert(errorAlertText);
          contactBtn.textContent = originalBtnText;
          contactBtn.disabled = false;
        }
      });
    }
  });
</script> 