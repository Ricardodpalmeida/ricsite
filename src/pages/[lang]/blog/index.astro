---
/**
 * Dynamic Blog Index Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * Lists blog posts filtered by the current language.
 */
import MainLayout from '../../../layouts/MainLayout.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages, getUIStrings } from '../../../i18n/utils';
import { getCollection } from 'astro:content';
import FormattedDate from '../../../components/FormattedDate.astro';
import '../../../styles/blog.css';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Validate the lang parameter - if invalid, redirect to the default language
if (!lang || !(lang in languages)) {
  return Astro.redirect(`/${defaultLang}/blog`);
}

// Get translations for the current language
const t = useTranslations(lang as keyof typeof languages);

// Load dynamic UI strings
const uiStrings = await getUIStrings(lang as keyof typeof languages);

// Get blog posts filtered by language and not draft
const posts = await getCollection('blog', (post) => {
  return post.data.language === lang && post.data.draft !== true;
}).then(posts => posts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
));

// Load profile data to get site information
const profileCollection = await getCollection('profile', (entry) => entry.data.language === lang);
const profileData = profileCollection.length > 0 ? profileCollection[0].data : null;

// Format title using site name if available
const pageTitle = profileData?.site?.siteName ?
  `${uiStrings['blog.title']} | ${profileData.site.siteName}` :
  `${uiStrings['blog.title']} | ${uiStrings['site.title']}`;

// Export a prerender function for static site generation
export async function getStaticPaths() {
  return Object.keys(languages).map(lang => ({ params: { lang } }));
}
---

<MainLayout 
  title={pageTitle}
  currentLanguage={lang as keyof typeof languages}
>
  <main class="blog-container">
    <div class="blog-header">
      <h1>{uiStrings['blog.title']}</h1>
    </div>

    <section class="posts-grid">
      {
        posts.length > 0 ? (
          posts.map((post) => (
            <a href={`/${lang}/blog/${post.slug.replace(`${lang}/`, '')}/`} class="post-card-link">
              <div class="post-card">
                {post.data.heroImage && (
                  <div class="post-image-container">
                    <img src={post.data.heroImage} alt="" class="post-image" />
                  </div>
                )}
                <div class="post-content">
                  <h2 class="post-title">
                    {post.data.title}
                  </h2>
                  <div class="post-meta">
                    <FormattedDate date={post.data.pubDate} lang={lang} />
                    {post.data.updatedDate && (
                      <span class="post-updated">
                        Â· {uiStrings['blog.updated']}: <FormattedDate date={post.data.updatedDate} lang={lang} />
                      </span>
                    )}
                  </div>
                  {post.data.description && (
                    <p class="post-description">{post.data.description}</p>
                  )}
                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="post-tags">
                      {post.data.tags.map((tag: string) => (
                        <span class="post-tag">{tag}</span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </a>
          ))
        ) : (
          <p class="no-posts">{uiStrings['blog.noPostsMessage']}</p>
        )
      }
    </section>
  </main>
</MainLayout> 