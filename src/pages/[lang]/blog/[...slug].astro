---
/**
 * Dynamic Blog Post Page with i18n Support
 * 
 * This page dynamically handles individual blog posts in multiple languages 
 * using the [lang] and [slug] parameters in the URL.
 */
import MainLayout from '../../../layouts/MainLayout.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages, getUIStrings } from '../../../i18n/utils';
import { getCollection } from 'astro:content';
import FormattedDate from '../../../components/FormattedDate.astro';

// Get the lang from the URL path parameters
const { lang } = Astro.params;
const { post } = Astro.props;

// Validate the lang parameter - if invalid, redirect to the default language
if (!lang || !(lang in languages)) {
  return Astro.redirect(`/${defaultLang}/blog`);
}

// Get translations for the current language
const t = useTranslations(lang as keyof typeof languages);

// Load dynamic UI strings
const uiStrings = await getUIStrings(lang as keyof typeof languages);

// Generate language alternatives for this post
const alternateLanguageUrls = {};

// If post has a translationKey, find alternate language versions
if (post.data.translationKey) {
  // This is critical for language switching to work
  // We need to find all posts with the same translationKey
  const allPosts = await getCollection('blog');
  
  const alternateVersions = allPosts.filter(p => 
    p.data.translationKey === post.data.translationKey && 
    p.data.language !== post.data.language
  );
  
  // Create alternate URLs using the post slug (not translationKey)
  for (const altPost of alternateVersions) {
    if (altPost.data.language in languages) {
      alternateLanguageUrls[altPost.data.language] = `/${altPost.data.language}/blog/${altPost.slug.replace(`${altPost.data.language}/`, '')}/`;
    }
  }
}

// Render the blog post content
const { Content } = await post.render();

// Export a prerender function for static site generation
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  
  // Create path entries for both slugs and translationKeys
  return posts.flatMap((post) => {
    const paths = [];
    
    // Clean slug to remove language prefix if it exists
    const cleanSlug = post.slug.replace(`${post.data.language}/`, '');
    
    // Add path for regular slug
    paths.push({
      params: {
        lang: post.data.language,
        slug: cleanSlug,
      },
      props: { post },
    });
    
    // If post has a translationKey, add path for that too
    if (post.data.translationKey) {
      paths.push({
        params: {
          lang: post.data.language,
          slug: post.data.translationKey,
        },
        props: { post },
      });
    }
    
    return paths;
  });
}
---

<MainLayout 
  title={`${post.data.title} | ${uiStrings['blog.title']} | Ricardo Almeida`}
  currentLanguage={lang as keyof typeof languages}
  alternateLanguageUrls={alternateLanguageUrls}
>
  <main class="blog-post-container">
    <article>
      <div class="blog-post-header">
        {post.data.heroImage && (
          <div class="hero-image-container">
            <img 
              src={post.data.heroImage} 
              alt="" 
              class="hero-image"
              transition:name={`blog-image-${post.slug}`}
            />
          </div>
        )}
        <h1 class="blog-post-title">{post.data.title}</h1>
        <div class="blog-post-meta">
          <FormattedDate date={post.data.pubDate} lang={lang} />
          {post.data.updatedDate && (
            <span class="blog-post-updated">
              Â· {uiStrings['blog.updated']}: <FormattedDate date={post.data.updatedDate} lang={lang} />
            </span>
          )}
        </div>
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="blog-post-tags">
            {post.data.tags.map((tag: string) => (
              <span class="blog-post-tag">{tag}</span>
            ))}
          </div>
        )}
      </div>

      <div class="blog-post-content">
        <Content />
      </div>
    </article>
    
    <div class="blog-post-navigation">
      <a href={`/${lang}/blog`} class="back-to-blog-link">
        &larr; {uiStrings['blog.back']}
      </a>
    </div>
  </main>
</MainLayout>

<style>
  .blog-post-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 4rem 0;
    min-height: calc(100vh - 150px);
    animation: fadeIn 0.5s ease-out;
  }
  
  .blog-post-header {
    margin-bottom: 2.5rem;
  }
  
  .hero-image-container {
    margin-bottom: 2rem;
    border-radius: 8px;
    overflow: hidden;
    max-height: 400px;
  }
  
  .hero-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .blog-post-title {
    font-size: var(--font-size-3xl);
    margin-bottom: 1rem;
    font-family: var(--font-family-title);
    line-height: 1.2;
  }
  
  .blog-post-meta {
    font-size: var(--font-size-sm);
    color: var(--color-gray-400);
    margin-bottom: 1rem;
  }
  
  .blog-post-updated {
    font-style: italic;
  }
  
  .blog-post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }
  
  .blog-post-tag {
    font-size: var(--font-size-xs);
    background-color: var(--color-gray-800);
    color: var(--color-cosmic-latte);
    padding: 0.25rem 0.75rem;
    border-radius: 100px;
  }
  
  .blog-post-content {
    font-size: var(--font-size-base);
    line-height: var(--line-height-loose);
  }
  
  .blog-post-content :global(h2) {
    font-size: var(--font-size-xl);
    margin: 2rem 0 1rem;
    font-family: var(--font-family-title);
  }
  
  .blog-post-content :global(h3) {
    font-size: var(--font-size-lg);
    margin: 1.5rem 0 1rem;
    font-family: var(--font-family-title);
  }
  
  .blog-post-content :global(p) {
    margin-bottom: 1.5rem;
  }
  
  .blog-post-content :global(ul), 
  .blog-post-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }
  
  .blog-post-content :global(li) {
    margin-bottom: 0.5rem;
  }
  
  .blog-post-content :global(blockquote) {
    border-left: 4px solid var(--color-cosmic-latte);
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: var(--color-gray-300);
  }
  
  .blog-post-content :global(code) {
    background-color: var(--color-gray-800);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: var(--font-family-mono);
    font-size: 0.9em;
  }
  
  .blog-post-content :global(pre) {
    background-color: var(--color-gray-800);
    padding: 1rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  
  .blog-post-content :global(pre code) {
    background-color: transparent;
    padding: 0;
    border-radius: 0;
  }
  
  .blog-post-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
  }
  
  .blog-post-content :global(a) {
    color: var(--color-cosmic-latte);
    text-decoration: none;
    transition: color var(--transition-base);
  }
  
  .blog-post-content :global(a:hover) {
    text-decoration: underline;
  }
  
  .blog-post-navigation {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-gray-800);
  }
  
  .back-to-blog-link {
    display: inline-block;
    color: var(--color-cosmic-latte);
    text-decoration: none;
    transition: color var(--transition-base);
  }
  
  .back-to-blog-link:hover {
    color: var(--color-white);
    text-decoration: underline;
  }
  
  /* Media Queries */
  @media (max-width: 768px) {
    .blog-post-container {
      padding: 4rem 1.5rem;
    }
    
    .blog-post-title {
      font-size: var(--font-size-2xl);
    }
  }
</style> 