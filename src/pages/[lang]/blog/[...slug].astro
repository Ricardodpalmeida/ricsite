---
/**
 * Dynamic Blog Post Page with i18n Support
 * 
 * This page dynamically handles individual blog posts in multiple languages 
 * using the [lang] and [slug] parameters in the URL.
 */
import MainLayout from '../../../layouts/MainLayout.astro';
import { useTranslations, defaultLang, languages, getUIStrings, languageNames } from '../../../i18n/utils';
import { getCollection } from 'astro:content';
import FormattedDate from '../../../components/FormattedDate.astro';
import '../../../styles/pages/blog.css';

// Get the lang from the URL path parameters
const { lang } = Astro.params;
const { post } = Astro.props;

// Used to make TypeScript recognize that defaultLang is used
const _redirectPath = `/${defaultLang}/blog`;

// Validate the lang parameter - if invalid, redirect to the default language
if (!lang || !(lang in languages)) {
  return Astro.redirect(_redirectPath);
}

// Get translations for the current language
const t = useTranslations(lang as keyof typeof languages);

// Load dynamic UI strings
const uiStrings = await getUIStrings(lang as keyof typeof languages) as Record<string, string>;

// Load profile data to get site information
const profileCollection = await getCollection('profile', (entry) => entry.data.language === lang);
const profileData = profileCollection.length > 0 ? profileCollection[0].data : null;

// Format title using site name if available
const siteName = profileData?.site?.siteName || 'Ricbits';
const pageTitle = `${post.data.title} | ${uiStrings['blog.title']} | ${siteName}`;

// Generate language alternatives for this post
const alternateLanguageUrls = {};

// If post has a translationKey, find alternate language versions
if (post.data.translationKey) {
  try {
    // Find all posts with the same translationKey
    const allPosts = await getCollection('blog');
    
    const alternateVersions = allPosts.filter(p => 
      p.data.translationKey === post.data.translationKey && 
      p.data.language !== post.data.language
    );
    
    // Create alternate URLs using the post slug
    for (const altPost of alternateVersions) {
      if (altPost.data.language in languages) {
        alternateLanguageUrls[altPost.data.language] = `/${altPost.data.language}/blog/${altPost.slug.replace(`${altPost.data.language}/`, '')}/`;
      }
    }
  } catch (error) {
    console.error('Error finding matching posts:', error);
  }
}

// Use readTime from frontmatter if available, otherwise use default
const readingTimeText = (post.data as any).readTime || "1 min read";

// Render the blog post content
const { Content } = await post.render();

// Export a prerender function for static site generation
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  
  // Create paths for each post
  const directPaths = posts.flatMap((post) => {
    // Clean slug to remove language prefix if it exists
    const cleanSlug = post.slug.replace(`${post.data.language}/`, '');
    
    // Add path for regular slug
    return {
      params: {
        lang: post.data.language,
        slug: cleanSlug,
      },
      props: { post },
    };
  });
  
  return directPaths;
}
---

<MainLayout 
  title={pageTitle}
  currentLanguage={lang as keyof typeof languages}
  alternateLanguageUrls={alternateLanguageUrls}
>
  <div class="container">
    <article class="blog-post">
      <!-- Hero Image with Overlay -->
      <div class="hero-image-container">
        {post.data.heroImage ? (
          <>
            <img 
              src={post.data.heroImage} 
              alt="" 
              class="hero-image"
              loading="eager"
            />
            <div class="post-image-overlay">
              <!-- Title -->
              <div class="overlay-title-container">
                <h1 class="overlay-title">{post.data.title}</h1>
              </div>
              
              <!-- Meta info -->
              <div class="overlay-meta-container">
                <div class="overlay-meta">
                  <FormattedDate date={post.data.pubDate} format="short" lang={lang} />
                  {post.data.author && (
                    <>
                      <span class="overlay-separator">•</span> 
                      <span class="overlay-author">{post.data.author}</span>
                    </>
                  )}
                  <span class="overlay-separator">•</span>
                  <span class="overlay-reading-time">{readingTimeText}</span>
                </div>
              </div>
              
              <!-- Tags -->
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="overlay-tags-container">
                  <div class="image-overlay-tags">
                    {post.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="overlay-tag">{tag}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </>
        ) : (
          <div class="post-header">
            <!-- If no hero image, display header normally -->
            <h1 class="post-title">{post.data.title}</h1>
            
            <div class="post-meta">
              <div class="meta-left">
                <div class="post-author-date">
                  {post.data.author && (
                    <span class="post-author">
                      {uiStrings['blog.by'] || "by"} {post.data.author}
                    </span>
                  )}
                  <span class="meta-separator">•</span>
                  <FormattedDate date={post.data.pubDate} format="short" lang={lang} />
                </div>
              </div>
              <div class="meta-right">
                <span class="reading-time">{readingTimeText}</span>
              </div>
            </div>
            
            {post.data.tags && post.data.tags.length > 0 && (
              <div class="post-categories">
                {post.data.tags.slice(0, 3).map((tag: string) => (
                  <span class="post-category">{tag}</span>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
      
      <!-- Content -->
      <div class="post-content">
        <Content />
      </div>
      
      <!-- Footer with sharing options -->
      <div class="post-footer">
        <!-- Tags list -->
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="post-tags">
            <h3 class="tags-title">{uiStrings['blog.tags'] || 'Tags'}</h3>
            <div class="tags-list">
              {post.data.tags.map((tag: string) => (
                <span class="post-tag">{tag}</span>
              ))}
            </div>
          </div>
        )}
        
        <div class="post-actions">
          <!-- Back to blog link -->
          <a href={`/${lang}/blog`} class="back-to-blog">
            &larr; {uiStrings['blog.back'] || 'Back to Blog'}
          </a>
          
          <!-- Share buttons -->
          <div class="share-post">
            <span class="share-label">{uiStrings['blog.shareText'] || 'Share:'}</span>
            <div class="share-buttons">
              <a href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.data.title)}&url=${encodeURIComponent(Astro.url.href)}`} target="_blank" rel="noopener noreferrer" class="share-button" aria-label={uiStrings['blog.shareOnX'] || 'Share on X'}>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                </svg>
              </a>
              <a href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(Astro.url.href)}&title=${encodeURIComponent(post.data.title)}`} target="_blank" rel="noopener noreferrer" class="share-button" aria-label={uiStrings['blog.shareOnLinkedIn'] || 'Share on LinkedIn'}>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                  <rect x="2" y="9" width="4" height="12"></rect>
                  <circle cx="4" cy="4" r="2"></circle>
                </svg>
              </a>
              <a href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(Astro.url.href)}`} target="_blank" rel="noopener noreferrer" class="share-button" aria-label={uiStrings['blog.shareOnFacebook'] || 'Share on Facebook'}>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </article>
  </div>
</MainLayout> 