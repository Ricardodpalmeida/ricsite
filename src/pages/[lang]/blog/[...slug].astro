---
/**
 * Dynamic Blog Post Page with i18n Support
 * 
 * This page dynamically handles individual blog posts in multiple languages 
 * using the [lang] and [slug] parameters in the URL.
 */
import MainLayout from '../../../layouts/MainLayout.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages, getUIStrings, languageNames } from '../../../i18n/utils';
import { getCollection } from 'astro:content';
import FormattedDate from '../../../components/FormattedDate.astro';
import Notification from '../../../components/Notification.astro';
import '../../../styles/blog.css';

// Get the lang and slug from the URL path parameters
const { lang, slug } = Astro.params;
const { post, redirectedFromLanguage = null } = Astro.props;

// Validate the lang parameter - if invalid, redirect to the default language
if (!lang || !(lang in languages)) {
  return Astro.redirect(`/${defaultLang}/blog`);
}

// Get translations for the current language
const t = useTranslations(lang as keyof typeof languages);

// Load dynamic UI strings
const uiStrings = await getUIStrings(lang as keyof typeof languages);

// Load profile data to get site information
const profileCollection = await getCollection('profile', (entry) => entry.data.language === lang);
const profileData = profileCollection.length > 0 ? profileCollection[0].data : null;

// Format title using site name if available
const siteName = profileData?.site?.siteName || 'Ricardo Almeida';
const pageTitle = `${post.data.title} | ${uiStrings['blog.title']} | ${siteName}`;

// Generate language alternatives for this post
const alternateLanguageUrls = {};

// If post has a translationKey, find alternate language versions
if (post.data.translationKey) {
  try {
    // This is critical for language switching to work
    // We need to find all posts with the same translationKey
    const allPosts = await getCollection('blog');
    
    const alternateVersions = allPosts.filter(p => 
      p.data.translationKey === post.data.translationKey && 
      p.data.language !== post.data.language
    );
    
    // Create alternate URLs using the post slug (not translationKey)
    for (const altPost of alternateVersions) {
      if (altPost.data.language in languages) {
        alternateLanguageUrls[altPost.data.language] = `/${altPost.data.language}/blog/${altPost.slug.replace(`${altPost.data.language}/`, '')}/`;
      }
    }
  } catch (error) {
    console.error('Error finding matching posts:', error);
  }
}

// Render the blog post content
const { Content } = await post.render();

// Prepare notification message if redirected from another language
let notificationMessage = null;
if (redirectedFromLanguage) {
  // Get the full language name for the redirected language
  const redirectedLanguageName = languageNames[redirectedFromLanguage] || redirectedFromLanguage;
  notificationMessage = t('blog.notAvailableInLanguage').replace('{0}', redirectedLanguageName);
}

// Export a prerender function for static site generation
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const allTranslationKeys = new Set();
  
  // First, collect all unique translationKeys
  posts.forEach(post => {
    if (post.data.translationKey) {
      allTranslationKeys.add(post.data.translationKey);
    }
  });
  
  // Create paths for each post
  const directPaths = posts.flatMap((post) => {
    const paths = [];
    
    // Clean slug to remove language prefix if it exists
    const cleanSlug = post.slug.replace(`${post.data.language}/`, '');
    
    // Add path for regular slug
    paths.push({
      params: {
        lang: post.data.language,
        slug: cleanSlug,
      },
      props: { post },
    });
    
    // If post has a translationKey, add path for that too
    if (post.data.translationKey) {
      paths.push({
        params: {
          lang: post.data.language,
          slug: post.data.translationKey,
        },
        props: { post },
      });
    }
    
    return paths;
  });
  
  // For each translationKey, create redirect paths for languages without content
  const redirectPaths = [];
  
  for (const translationKey of allTranslationKeys) {
    // For each language
    for (const language of Object.keys(languages)) {
      // Check if this language has a post with this translationKey
      const existingPost = posts.find(p => 
        p.data.translationKey === translationKey && 
        p.data.language === language
      );
      
      // If not, create a redirect to the default language version
      if (!existingPost) {
        // Find default language version
        const defaultPost = posts.find(p => 
          p.data.translationKey === translationKey && 
          p.data.language === defaultLang
        );
        
        // Only create redirect if default language version exists
        if (defaultPost) {
          redirectPaths.push({
            params: {
              lang: language,
              slug: translationKey.toString(),
            },
            props: { 
              post: defaultPost, 
              redirectedFromLanguage: language
            },
          });
        }
      }
    }
  }
  
  // Combine direct paths and redirect paths
  return [...directPaths, ...redirectPaths];
}
---

<MainLayout 
  title={pageTitle}
  currentLanguage={lang as keyof typeof languages}
  alternateLanguageUrls={alternateLanguageUrls}
>
  {redirectedFromLanguage && (
    <Notification 
      message={notificationMessage} 
      type="warning" 
      dismissTime={6000}
    />
  )}
  
  <main class="blog-post-container">
    <article>
      <div class="blog-post-header">
        {post.data.heroImage && (
          <div class="hero-image-container">
            <img 
              src={post.data.heroImage} 
              alt="" 
              class="hero-image"
              transition:name={`blog-image-${post.slug}`}
            />
          </div>
        )}
        <h1 class="blog-post-title">{post.data.title}</h1>
        <div class="blog-post-meta">
          <FormattedDate date={post.data.pubDate} lang={lang} />
          {post.data.updatedDate && (
            <span class="blog-post-updated">
              Â· {uiStrings['blog.updated']}: <FormattedDate date={post.data.updatedDate} lang={lang} />
            </span>
          )}
        </div>
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="blog-post-tags">
            {post.data.tags.map((tag: string) => (
              <span class="blog-post-tag">{tag}</span>
            ))}
          </div>
        )}
      </div>

      <div class="blog-post-content">
        <Content />
      </div>
    </article>
    
    <div class="blog-post-navigation">
      <a href={`/${lang}/blog`} class="back-to-blog-link">
        &larr; {uiStrings['blog.back']}
      </a>
    </div>
  </main>
</MainLayout> 