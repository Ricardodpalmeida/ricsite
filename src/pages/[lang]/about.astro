---
/**
 * Dynamic About Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * The content is rendered based on the language detected from the URL.
 */
import MainLayout from '../../layouts/MainLayout.astro';
import { useTranslations, languages, getUIStrings } from '../../i18n/utils';
import { getCollection } from 'astro:content';
import PageHeader from '../../components/PageHeader.astro';
import SkillsAndTechnologies from '../../components/SkillsAndTechnologies.astro';
import '../../styles/pages/profile.css';
import '../../styles/pages/certifications.css';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Ensure languages object is available and has at least English
const supportedLanguages = { ...languages };
if (!('en' in supportedLanguages)) {
  supportedLanguages['en'] = 'English';
}

// Validate the lang parameter - if invalid, redirect to English
const validLang = lang && (lang in supportedLanguages) ? lang : 'en';

// If the requested language is invalid, redirect to English about page
if (validLang !== lang) {
  console.log(`Invalid language '${lang}' requested, redirecting to English about page`);
  return Astro.redirect('/en/about');
}

// Get translations for the current language
const t = useTranslations(validLang);

// Load dynamic UI strings with error handling
let uiStrings: Record<string, string> = {};
try {
  uiStrings = await getUIStrings(validLang);
} catch (error) {
  console.error(`Error loading UI strings for ${validLang}:`, error);
  // uiStrings is already initialized as empty object
}

// Get profile data from content collection with error handling
let profileInfo = null;
let englishFallback = false;

try {
  // First try to get profile in the requested language
  const profileCollection = await getCollection('profile', (entry) => entry.data.language === validLang);
  profileInfo = profileCollection.length > 0 ? profileCollection[0].data : null;
  
  // If not found or critical sections are missing, try English as fallback
  if (!profileInfo || 
      !profileInfo.experience || 
      !profileInfo.education || 
      !profileInfo.certifications ||
      !profileInfo.skills ||
      !profileInfo.technologies ||
      !profileInfo.languages) {
    console.log(`Missing required content in ${validLang} profile, trying English fallback`);
    
    if (validLang !== 'en') {
      const enProfileCollection = await getCollection('profile', (entry) => entry.data.language === 'en');
      
      if (enProfileCollection.length > 0) {
        // Keep original profile data but merge in English data for missing sections
        const enProfile = enProfileCollection[0].data;
        
        if (!profileInfo) {
          profileInfo = enProfile;
          englishFallback = true;
        } else {
          // Merge in English sections only where needed
          if (!profileInfo.experience || profileInfo.experience.length === 0) {
            profileInfo.experience = enProfile.experience;
            englishFallback = true;
          }
          
          if (!profileInfo.education || profileInfo.education.length === 0) {
            profileInfo.education = enProfile.education;
            englishFallback = true;
          }
          
          if (!profileInfo.certifications || profileInfo.certifications.length === 0) {
            profileInfo.certifications = enProfile.certifications;
            englishFallback = true;
          }
          
          if (!profileInfo.sectionDescriptions) {
            profileInfo.sectionDescriptions = enProfile.sectionDescriptions;
            englishFallback = true;
          }
          
          if (!profileInfo.skills || profileInfo.skills.length === 0) {
            profileInfo.skills = enProfile.skills;
            englishFallback = true;
          }
          
          if (!profileInfo.technologies || profileInfo.technologies.length === 0) {
            profileInfo.technologies = enProfile.technologies;
            englishFallback = true;
          }
          
          if (!profileInfo.languages || profileInfo.languages.length === 0) {
            profileInfo.languages = enProfile.languages;
            englishFallback = true;
          }
        }
      }
    }
  }
} catch (error) {
  console.error(`Error loading profile data:`, error);
}

// Format title based on site properties or fallback
const pageTitle = profileInfo?.site?.siteName ? 
  `${uiStrings['about.title'] || 'About Me'} | ${profileInfo.site.siteName}` : 
  `${uiStrings['about.title'] || 'About Me'} | Ricbits`;

// Export a prerender function for static site generation
export async function getStaticPaths() {
  // Import the language list directly to ensure it's loaded
  const { getSupportedLanguages } = await import('../../i18n/utils');
  const dynamicLanguages = await getSupportedLanguages();
  
  // Generate paths for each language
  return Object.keys(dynamicLanguages).map(lang => ({
    params: { lang }
  }));
}
---

<MainLayout
  title={`${t('about.title')} | Ricbits`}
  description={t('about.description')}
  currentLanguage={validLang}
>
  <main class="container about-container">
    {!profileInfo ? (
      <div class="error-message">
        <h2>{t('error.profileData')}</h2>
        <p>Please try refreshing the page or switching to English.</p>
      </div>
    ) : (
      <>
        <PageHeader profileData={profileInfo} currentLanguage={validLang}>
          {profileInfo.about && profileInfo.about.map((paragraph: string) => (
            <p>{paragraph}</p>
          ))}
        </PageHeader>

        {englishFallback && (
          <div class="notice-message">
            <p>Some content is displayed in English because it's not available in {validLang.toUpperCase()}.</p>
          </div>
        )}

        <SkillsAndTechnologies 
          skills={profileInfo.skills || []}
          technologies={profileInfo.technologies || []}
          currentLanguage={validLang}
        />

        <section class="profile-section" id="experience">
          <h2 class="section-heading">{uiStrings['profile.experience'] || 'Experience'}</h2>
          <div class="timeline-container">
            {profileInfo.experience && profileInfo.experience.map((job: any) => (
              <div class="timeline-item">
                <div class="timeline-content">
                  <h3>{job.title}</h3>
                  <h4>{job.company}</h4>
                  <p class="timeline-period">{job.duration}</p>
                  {job.location && <p class="timeline-location">{job.location}</p>}
                  <p class="timeline-description">{job.description}</p>
                </div>
              </div>
            ))}
          </div>
        </section>

        <section class="profile-section" id="education">
          <h2 class="section-heading">{uiStrings['profile.education'] || 'Education'}</h2>
          <div class="timeline-container">
            {profileInfo.education && profileInfo.education.map((edu: any) => (
              <div class="timeline-item">
                <div class="timeline-content">
                  <h3>{edu.school}</h3>
                  <h4>{edu.degree}</h4>
                  {edu.duration && <p class="timeline-period">{edu.duration}</p>}
                  {edu.grade && <p class="timeline-meta"><strong>{uiStrings['profile.grade'] || 'Grade'}:</strong> {edu.grade}</p>}
                  {edu.thesis && <p class="timeline-meta"><strong>{uiStrings['profile.thesis'] || 'Thesis'}:</strong> {edu.thesis}</p>}
                  {edu.description && <p class="timeline-description">{edu.description}</p>}
                </div>
              </div>
            ))}
          </div>
        </section>

        <section class="profile-section" id="certifications">
          <h2 class="section-heading">{uiStrings['profile.certifications'] || 'Certifications'}</h2>
          <div class="certifications-carousel">
            <button class="carousel-arrow prev" aria-label="Previous">&#60;</button>
            <div class="certifications-container">
              <div class="certifications-track">
                {profileInfo.certifications && profileInfo.certifications.map((cert: any) => (
                  <div class="certification-carousel-item">
                    <a 
                      href={cert.credentialURL || cert.url || '#'} 
                      target="_blank" 
                      rel="noopener noreferrer" 
                      class="certification-pill"
                      data-tooltip={cert.description || ''}
                    >
                      <img src="/icons/newtab.svg" alt="External link" class="external-link" />
                      <div class="cert-meta">
                        <span class="cert-date">{cert.issueDate || cert.issued}</span>
                      </div>
                      <span class="cert-name">{cert.title || cert.name}</span>
                      <span class="cert-issuer">
                        <span class="cert-issuer-label">Issued by:</span>
                        {cert.issuer}
                      </span>
                      {cert.status && <span class="cert-status"><span class="cert-issuer-label">Status:</span> {cert.status}</span>}
                      {cert.description && <p class="cert-description">{cert.description}</p>}
                    </a>
                  </div>
                ))}
              </div>
            </div>
            <button class="carousel-arrow next" aria-label="Next">&#62;</button>
          </div>
        </section>

        <section class="profile-section" id="languages">
          <h2 class="section-heading">{uiStrings['profile.languages'] || 'Languages'}</h2>
          <ul class="languages-list">
            {profileInfo.languages && profileInfo.languages.map((language: any) => (
              <li class="language-item">
                <span class="language-name">{language.name}</span>
                <span class="language-proficiency">{language.proficiency}</span>
                {language.description && <span class="language-description">{language.description}</span>}
              </li>
            ))}
          </ul>
        </section>

        <script is:inline>
          // Pure vanilla JS approach to avoid TypeScript issues
          document.addEventListener('DOMContentLoaded', function() {
            // Get carousel elements 
            var track = document.querySelector('#certifications .certifications-track');
            var prevBtn = document.querySelector('#certifications .carousel-arrow.prev');
            var nextBtn = document.querySelector('#certifications .carousel-arrow.next');
            var items = document.querySelectorAll('#certifications .certification-carousel-item');
            
            if (!track || !items.length || !prevBtn || !nextBtn) {
              console.log('Carousel elements not found');
              return;
            }
            
            // Configuration
            var totalItems = items.length;
            var currentPage = 0;
            var isMobile = window.innerWidth <= 768;
            var itemsPerPage = isMobile ? 1 : 2;
            var totalPages = Math.ceil(totalItems / itemsPerPage);
            
            // Responsive item styling
            function setItemStyles() {
              isMobile = window.innerWidth <= 768;
              itemsPerPage = isMobile ? 1 : 2;
              totalPages = Math.ceil(totalItems / itemsPerPage);
              
              var itemWidth = 100 / itemsPerPage;
              
              for (var i = 0; i < items.length; i++) {
                items[i].style.flex = '0 0 ' + itemWidth + '%';
                items[i].style.width = itemWidth + '%';
              }
              
              // If we're not on a valid page after resize, adjust
              if (currentPage >= totalPages) {
                currentPage = totalPages - 1;
              }
              
              // Update display
              goToPage(currentPage, false);
            }
            
            // Navigation function with improved positioning
            function goToPage(page, animate = true) {
              if (page < 0) page = totalPages - 1;
              if (page >= totalPages) page = 0;
              currentPage = page;
              
              // Calculate the offset based on itemsPerPage
              var offset = -(currentPage * (100 / itemsPerPage) * itemsPerPage);
              
              // Apply transform with or without animation
              if (!animate) {
                track.style.transition = 'none';
                setTimeout(function() {
                  track.style.transform = 'translateX(' + offset + '%)';
                  setTimeout(function() {
                    track.style.transition = 'transform var(--transition-base)';
                  }, 50);
                }, 0);
              } else {
                track.style.transform = 'translateX(' + offset + '%)';
              }
              
              // Update button visibility 
              updateButtonVisibility();
            }
            
            // Update button visibility based on position
            function updateButtonVisibility() {
              // Always show both arrows if there are multiple pages
              prevBtn.style.opacity = totalPages > 1 ? "0.7" : "0.3";
              nextBtn.style.opacity = totalPages > 1 ? "0.7" : "0.3";
              
              // Disable buttons if only one page
              prevBtn.disabled = totalPages <= 1;
              nextBtn.disabled = totalPages <= 1;
            }
            
            // Add click events
            prevBtn.addEventListener('click', function() {
              goToPage(currentPage - 1);
            });
            
            nextBtn.addEventListener('click', function() {
              goToPage(currentPage + 1);
            });
            
            // Add resize listener
            window.addEventListener('resize', setItemStyles);
            
            // Initialize
            setItemStyles();
          });
        </script>
      </>
    )}
  </main>
</MainLayout> 