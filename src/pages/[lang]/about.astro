---
/**
 * Dynamic About Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * The content is rendered based on the language detected from the URL.
 */
import MainLayout from '../../layouts/MainLayout.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages, getUIStrings } from '../../i18n/utils';
import { getCollection } from 'astro:content';
import PageHeader from '../../components/PageHeader.astro';
import CardComponent from '../../components/CardComponent.astro';
import '../../styles/profile.css';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Ensure languages object is available and has at least English
const supportedLanguages = { ...languages };
if (!('en' in supportedLanguages)) {
  supportedLanguages['en'] = 'English';
}

// Validate the lang parameter - if invalid, redirect to English
const validLang = lang && (lang in supportedLanguages) ? lang : 'en';

// If the requested language is invalid, redirect to English about page
if (validLang !== lang) {
  console.log(`Invalid language '${lang}' requested, redirecting to English about page`);
  return Astro.redirect('/en/about');
}

// Get translations for the current language
const t = useTranslations(validLang);

// Load dynamic UI strings with error handling
let uiStrings;
try {
  uiStrings = await getUIStrings(validLang);
} catch (error) {
  console.error(`Error loading UI strings for ${validLang}:`, error);
  uiStrings = {}; // Fallback to empty object
}

// Get profile data from content collection with error handling
let profileInfo = null;
let englishFallback = false;

try {
  // First try to get profile in the requested language
  const profileCollection = await getCollection('profile', (entry) => entry.data.language === validLang);
  profileInfo = profileCollection.length > 0 ? profileCollection[0].data : null;
  
  // If not found or critical sections are missing, try English as fallback
  if (!profileInfo || 
      !profileInfo.experience || 
      !profileInfo.education || 
      !profileInfo.skillDescriptions ||
      !profileInfo.certifications) {
    console.log(`Missing required content in ${validLang} profile, trying English fallback`);
    
    if (validLang !== 'en') {
      const enProfileCollection = await getCollection('profile', (entry) => entry.data.language === 'en');
      
      if (enProfileCollection.length > 0) {
        // Keep original profile data but merge in English data for missing sections
        const enProfile = enProfileCollection[0].data;
        
        if (!profileInfo) {
          profileInfo = enProfile;
          englishFallback = true;
        } else {
          // Merge in English sections only where needed
          if (!profileInfo.experience || profileInfo.experience.length === 0) {
            profileInfo.experience = enProfile.experience;
            englishFallback = true;
          }
          
          if (!profileInfo.education || profileInfo.education.length === 0) {
            profileInfo.education = enProfile.education;
            englishFallback = true;
          }
          
          if (!profileInfo.skillDescriptions || Object.keys(profileInfo.skillDescriptions).length === 0) {
            profileInfo.skillDescriptions = enProfile.skillDescriptions;
            englishFallback = true;
          }
          
          if (!profileInfo.certifications || profileInfo.certifications.length === 0) {
            profileInfo.certifications = enProfile.certifications;
            englishFallback = true;
          }
          
          if (!profileInfo.sectionDescriptions) {
            profileInfo.sectionDescriptions = enProfile.sectionDescriptions;
            englishFallback = true;
          }
        }
      }
    }
  }
} catch (error) {
  console.error(`Error loading profile data:`, error);
}

// Export a prerender function for static site generation
export async function getStaticPaths() {
  const paths = [{ params: { lang: 'en' } }];
  
  Object.keys(languages).forEach(lang => {
    if (lang !== 'en') {
      paths.push({ params: { lang } });
    }
  });
  
  return paths;
}
---

<MainLayout
  title={`${uiStrings['about.title'] || 'About'} | Ricardo Almeida`}
  currentLanguage={validLang}
>
  <main class="about-container">
    {!profileInfo ? (
      <div class="error-message">
        <h2>{t('error.profileData')}</h2>
        <p>Please try refreshing the page or switching to English.</p>
      </div>
    ) : (
      <>
        <PageHeader profileData={profileInfo} currentLanguage={validLang}>
          {profileInfo.about && profileInfo.about.map((paragraph: string) => (
            <p>{paragraph}</p>
          ))}
        </PageHeader>

        {englishFallback && (
          <div class="notice-message">
            <p>Some content is displayed in English because it's not available in {validLang.toUpperCase()}.</p>
          </div>
        )}

        <section class="profile-section" id="experience">
          <h2>{uiStrings['profile.experience'] || 'Experience'}</h2>
          <div class="timeline-container">
            {profileInfo.experience && profileInfo.experience.map((job: any) => (
              <div class="timeline-item">
                <div class="timeline-content">
                  <h3>{job.title}</h3>
                  <h4>{job.company}</h4>
                  <p class="timeline-period">{job.duration}</p>
                  {job.location && <p class="timeline-location">{job.location}</p>}
                  <p class="timeline-description">{job.description}</p>
                </div>
              </div>
            ))}
          </div>
        </section>

        <section class="profile-section" id="education">
          <h2>{uiStrings['profile.education'] || 'Education'}</h2>
          <div class="timeline-container">
            {profileInfo.education && profileInfo.education.map((edu: any) => (
              <div class="timeline-item">
                <div class="timeline-content">
                  <h3>{edu.school}</h3>
                  <h4>{edu.degree}</h4>
                  {edu.duration && <p class="timeline-period">{edu.duration}</p>}
                  {edu.grade && <p class="timeline-meta"><strong>{uiStrings['profile.grade'] || 'Grade'}:</strong> {edu.grade}</p>}
                  {edu.thesis && <p class="timeline-meta"><strong>{uiStrings['profile.thesis'] || 'Thesis'}:</strong> {edu.thesis}</p>}
                  {edu.description && <p class="timeline-description">{edu.description}</p>}
                </div>
              </div>
            ))}
          </div>
        </section>

        <section class="profile-section" id="skills">
          <h2>{uiStrings['profile.skills'] || 'Skills'}</h2>
          <div class="skills-container">
            {profileInfo.skillDescriptions && Object.keys(profileInfo.skillDescriptions).map((skill: string) => (
              <CardComponent
                title={skill}
                description={profileInfo.skillDescriptions[skill]}
              />
            ))}
          </div>
        </section>

        <section class="profile-section" id="certifications">
          <h2>{uiStrings['profile.certifications'] || 'Certifications'}</h2>
          <div class="certifications-container">
            {profileInfo.certifications && profileInfo.certifications.map((cert: any) => (
              <CardComponent
                title={cert.title || cert.name}
                subtitle={cert.issuer}
                description={cert.description || ''}
                url={cert.credentialURL || cert.url}
                metadata={{
                  issued: cert.issueDate || cert.issued,
                  expires: cert.expiryDate || cert.expires,
                  credential: cert.credential,
                  status: cert.status
                }}
              />
            ))}
          </div>
        </section>
      </>
    )}
  </main>
</MainLayout> 