---
/**
 * Dynamic Hobbies Page with i18n Support
 * 
 * This page dynamically handles multiple languages using the [lang] parameter in the URL.
 * The content is rendered based on the language detected from the URL.
 */
import MainLayout from '../../layouts/MainLayout.astro';
import { useTranslations, languages, getUIStrings, getProfileStrings } from '../../i18n/utils';
import SideProjectsComponent from '../../components/SideProjects.astro';
import '../../styles/pages/profile.css';
import '../../styles/components/carousel.css';
import '../../styles/pages/hobbies.css';

// Get the lang from the URL path parameter
const { lang } = Astro.params;

// Ensure languages object is available and has at least English
const supportedLanguages = { ...languages };
if (!('en' in supportedLanguages)) {
  supportedLanguages['en'] = 'English';
}

// Validate the lang parameter - if invalid, redirect to English
const validLang = lang && (lang in supportedLanguages) ? lang : 'en';

// If the requested language is invalid, redirect to English hobbies page
if (validLang !== lang) {
  console.log(`Invalid language '${lang}' requested, redirecting to English hobbies page`);
  return Astro.redirect('/en/hobbies');
}

// Get translations for the current language
const t = useTranslations(validLang);

// Load dynamic UI strings with error handling
let uiStrings: Record<string, string> = {};
try {
  uiStrings = await getUIStrings(validLang);
} catch (error) {
  console.error(`Error loading UI strings for ${validLang}:`, error);
  // Fallback to empty object (already initialized)
}

// Load profile data based on language
let profileData: Record<string, any> | null = null;
try {
  profileData = await getProfileStrings(validLang);
  console.log(`Hobbies - Loaded profile data for language: ${validLang}`);
} catch (error) {
  console.error(`Hobbies - Error loading profile data for language: ${validLang}`, error);
  // Null fallback already set
}

// Export a prerender function for static site generation
export async function getStaticPaths() {
  // Import the language list directly to ensure it's loaded
  const { getSupportedLanguages } = await import('../../i18n/utils');
  const dynamicLanguages = await getSupportedLanguages();
  
  // Generate paths for each language
  return Object.keys(dynamicLanguages).map(lang => ({
    params: { lang }
  }));
}

// Format title based on site properties or fallback
const pageTitle = profileData?.site?.siteName ? 
  `${uiStrings['sideProjects.title'] || 'Hobbies'} | ${profileData.site.siteName}` : 
  `${uiStrings['sideProjects.title'] || 'Hobbies'} | Ricbits`;
---

<MainLayout
  title={pageTitle}
  currentLanguage={validLang}
>
  <main class="container side-projects-main">
    {!profileData ? (
      <div class="error-message">
        <h2>{t('error.profileData')}</h2>
        <p>Please try refreshing the page or switching to English.</p>
      </div>
    ) : (
      <>
        <SideProjectsComponent
          profileData={profileData}
          currentLanguage={validLang}
        />
      </>
    )}
  </main>
</MainLayout> 