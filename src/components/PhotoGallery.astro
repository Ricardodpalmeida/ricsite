---
/**
 * Photo Gallery Component
 * 
 * CSS Dependencies:
 * - styles/components/photo-gallery.css
 */
import '../styles/components/photo-gallery.css';

// Since we have syntax issues with imports, use a simpler approach
// to avoid dealing with TypeScript errors
---

<div class="photo-gallery-container">
  <h2 class="section-title">Photo Gallery</h2>
  <p class="section-subtitle">A collection of my photography work</p>
  
  <div class="photos-carousel">
    <button class="carousel-arrow prev" aria-label="Previous photo">&#60;</button>
    <div class="photos-container">
      <div class="photos-track">
        {Array.from({ length: 8 }).map((_, index) => (
          <div class="photo-carousel-item" data-index={index}>
            <img 
              src={`/images/HomePhotoGallery/photo${index + 1}.jpg`}
              alt={`Photo ${index + 1}`} 
              loading={index < 4 ? "eager" : "lazy"}
              class="photo-image"
            />
          </div>
        ))}
      </div>
    </div>
    <button class="carousel-arrow next" aria-label="Next photo">&#62;</button>
  </div>
</div>

<script is:inline>
  // Carousel functionality
  document.addEventListener('DOMContentLoaded', function() {
    const carouselTrack = document.querySelector('.photos-track');
    const prevButton = document.querySelector('.photos-carousel .prev');
    const nextButton = document.querySelector('.photos-carousel .next');
    const carouselItems = document.querySelectorAll('.photo-carousel-item');
    
    if (!carouselTrack || !prevButton || !nextButton || carouselItems.length === 0) return;
    
    let currentIndex = 0;
    const totalItems = carouselItems.length;
    
    function updateCarousel() {
      // Simple sequential sliding - always move by 100% for consistent navigation
      if (carouselTrack instanceof HTMLElement) {
        carouselTrack.style.transform = `translateX(-${currentIndex * 100}%)`;
      }
      
      // Mark current item as active
      carouselItems.forEach((item, i) => {
        if (i === currentIndex) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
    }
    
    // Event listeners with circular navigation
    prevButton.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
      } else {
        // Wrap to the end
        currentIndex = totalItems - 1;
      }
      updateCarousel();
    });
    
    nextButton.addEventListener('click', () => {
      if (currentIndex < totalItems - 1) {
        currentIndex++;
      } else {
        // Wrap to the beginning
        currentIndex = 0;
      }
      updateCarousel();
    });
    
    // Mobile touch swipe functionality
    let touchStartX = 0;
    let touchEndX = 0;
    
    const handleSwipe = () => {
      const swipeThreshold = 50;
      const swipeDistance = touchEndX - touchStartX;
      
      if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
          // Swipe right - go to previous
          if (currentIndex > 0) {
            currentIndex--;
          } else {
            // Wrap to the end
            currentIndex = totalItems - 1;
          }
        } else {
          // Swipe left - go to next
          if (currentIndex < totalItems - 1) {
            currentIndex++;
          } else {
            // Wrap to the beginning
            currentIndex = 0;
          }
        }
        updateCarousel();
      }
    };
    
    carouselTrack.addEventListener('touchstart', function(e) {
      const touchEvent = e;
      if (touchEvent.changedTouches && touchEvent.changedTouches.length > 0) {
        touchStartX = touchEvent.changedTouches[0].screenX;
      }
    }, { passive: true });
    
    carouselTrack.addEventListener('touchend', function(e) {
      const touchEvent = e;
      if (touchEvent.changedTouches && touchEvent.changedTouches.length > 0) {
        touchEndX = touchEvent.changedTouches[0].screenX;
        handleSwipe();
      }
    }, { passive: true });
    
    // Update carousel on window resize
    window.addEventListener('resize', updateCarousel);
    
    // Initialize carousel
    updateCarousel();
  });
</script> 