---
/**
 * FormattedDate Component
 * 
 * A reusable component for formatting dates consistently across the site.
 * Takes a Date object and formats it in a human-readable way based on the current language.
 */
import { getLangFromUrl, useTranslations } from '../i18n/utils';

export interface Props {
  date: Date;
  format?: 'long' | 'short';
  lang?: string;
}

const { date, format = 'long', lang } = Astro.props;

// Get language from URL or from prop
const currentLang = lang || getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);

// Format the date manually using translations
const formatDateWithTranslations = (date: Date, format: 'long' | 'short') => {
  const day = date.getDate();
  const month = date.getMonth(); // 0-11
  const year = date.getFullYear();

  // Default month names as fallback
  const defaultMonths = {
    short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    long: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  };

  // Try to get month names from translations - handle different formats
  let monthName;
  
  // First try the flattened key structure (months.long/short)
  const monthsKey = `months.${format}`;
  let monthsArray = t(monthsKey);
  
  // If that doesn't work, try to get the months object and extract the format from it
  if (!Array.isArray(monthsArray)) {
    const monthsData = t('months');
    // Check if monthsData is an object with the requested format
    if (monthsData && typeof monthsData === 'object' && Array.isArray(monthsData[format])) {
      monthsArray = monthsData[format];
    }
  }
  
  // If we have a valid array with enough elements, use it
  if (Array.isArray(monthsArray) && monthsArray.length > month) {
    monthName = monthsArray[month];
  } else {
    // Fallback to default months
    monthName = defaultMonths[format][month];
  }

  // Format based on language conventions
  if (currentLang === 'zh') {
    // Chinese format: YYYY年MM月DD日
    // Check if monthName already includes the 月 character
    const formattedMonth = monthName.includes('月') ? monthName : `${monthName}月`;
    return `${year}年${formattedMonth}${day}日`;
  } else if (currentLang === 'de' || currentLang === 'fr') {
    // German/French format: DD. Month YYYY
    return `${day}. ${monthName} ${year}`;
  } else {
    // Default format: Month DD, YYYY
    return `${monthName} ${day}, ${year}`;
  }
};

const formattedDate = formatDateWithTranslations(date, format);
---

<time datetime={date.toISOString()}>
  {formattedDate}
</time> 