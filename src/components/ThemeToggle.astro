---
/**
 * Theme Toggle Component
 * 
 * Provides a toggle switch for switching between light and dark modes
 * 
 * CSS Dependencies:
 * - styles/dark-mode-toggle.css
 */
import '../styles/dark-mode-toggle.css';

// Accept simple string props instead of complex objects
const { 
  class: className = '',
  lightModeText = "Switch to light mode", 
  darkModeText = "Switch to dark mode" 
} = Astro.props;
---

<button 
  id="theme-toggle" 
  class:list={['theme-toggle', className]} 
  aria-label={darkModeText}
  title={darkModeText}
  data-switch-to-light={lightModeText}
  data-switch-to-dark={darkModeText}
>
  <div class="toggle-track">
    <div class="toggle-icon">
      <!-- Sun icon -->
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path 
          d="M12 17C14.7614 17 17 14.7614 17 12C17 9.23858 14.7614 7 12 7C9.23858 7 7 9.23858 7 12C7 14.7614 9.23858 17 12 17Z" 
          stroke="currentColor" 
          stroke-width="2" 
          stroke-linecap="round" 
          stroke-linejoin="round"
        />
        <path d="M12 1V3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12 21V23" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M4.22 4.22L5.64 5.64" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M18.36 18.36L19.78 19.78" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M1 12H3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M21 12H23" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M4.22 19.78L5.64 18.36" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M18.36 5.64L19.78 4.22" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </div>
    <div class="toggle-icon">
      <!-- Moon icon -->
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path 
          d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" 
          stroke="currentColor" 
          stroke-width="2" 
          stroke-linecap="round" 
          stroke-linejoin="round"
        />
      </svg>
    </div>
    <div class="toggle-thumb"></div>
  </div>
</button>

<script>
  const toggleButton = document.getElementById('theme-toggle');

  // Retrieve strings from data attributes
  const uiStrings = {
    switchToLight: toggleButton.getAttribute('data-switch-to-light'),
    switchToDark: toggleButton.getAttribute('data-switch-to-dark')
  };

  const getThemePreference = (): 'light' | 'dark' => {
    if (typeof localStorage !== 'undefined') {
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'light' || savedTheme === 'dark') return savedTheme;
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  const updateButtonLabels = (theme: 'light' | 'dark') => {
    const isDark = theme === 'dark';
    const newTitle = isDark ? uiStrings.switchToLight : uiStrings.switchToDark;
    const newAriaLabel = newTitle;
    if (toggleButton) {
        toggleButton.setAttribute('title', newTitle);
        toggleButton.setAttribute('aria-label', newAriaLabel);
    }
  };

  const applyTheme = (theme: 'light' | 'dark', savePreference = true) => {
    const html = document.documentElement;
    html.classList.toggle('dark-mode', theme === 'dark');
    
    if (savePreference && typeof localStorage !== 'undefined') {
      localStorage.setItem('theme', theme);
    }
    updateButtonLabels(theme);
  };

  document.addEventListener('DOMContentLoaded', () => {
    const initialTheme = getThemePreference();
    const saveInitial = typeof localStorage !== 'undefined' && !!localStorage.getItem('theme');
    applyTheme(initialTheme as 'light' | 'dark', saveInitial);
    
    if (toggleButton) {
      toggleButton.addEventListener('click', () => {
        const html = document.documentElement;
        const isDark = html.classList.contains('dark-mode');
        applyTheme(isDark ? 'light' : 'dark', true);
      });
    }
  });

  if (typeof window !== 'undefined') {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      const userHasChosenTheme = typeof localStorage !== 'undefined' && localStorage.getItem('theme') !== null;
      
      if (!userHasChosenTheme) {
         const newTheme = e.matches ? 'dark' : 'light';
         applyTheme(newTheme, false);
      }
    });
  }
</script> 