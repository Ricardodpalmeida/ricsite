---
/**
 * Notification Component
 * 
 * Shows a temporary notification that automatically disappears after a specified duration.
 * Used for displaying language availability messages and other temporary notifications.
 */
import '../styles/notification.css';

const { message, type = "info", autoDismiss = true, dismissTime = 5000 } = Astro.props;

// Generate unique ID for this notification instance
const notificationId = `notification-${Math.random().toString(36).substring(2, 11)}`;
---

<div 
  id={notificationId} 
  class={`notification notification-${type} ${autoDismiss ? 'auto-dismiss' : ''}`}
  data-dismiss-time={dismissTime}
  role="alert"
>
  <div class="notification-content">
    <span class="notification-message">{message}</span>
    <button class="notification-close" aria-label="Close notification">Ã—</button>
  </div>
</div>

<script define:vars={{ notificationId, autoDismiss, dismissTime }}>
  // Handle notification visibility and dismissal
  document.addEventListener('DOMContentLoaded', () => {
    const notification = document.getElementById(notificationId);
    if (!notification) return;
    
    // Make notification visible after a small delay
    setTimeout(() => {
      notification.classList.add('visible');
    }, 100);
    
    // Set up auto-dismiss if enabled
    if (autoDismiss) {
      setTimeout(() => {
        dismissNotification();
      }, dismissTime);
    }
    
    // Set up close button
    const closeBtn = notification.querySelector('.notification-close');
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        dismissNotification();
      });
    }
    
    // Function to dismiss the notification
    function dismissNotification() {
      notification.classList.remove('visible');
      
      // Remove the element from DOM after transition
      setTimeout(() => {
        notification.remove();
      }, 300);
    }
  });
</script> 