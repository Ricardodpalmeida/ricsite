---
import { getLangFromUrl } from '../i18n/utils';
import { getCollection } from 'astro:content';
import { marked } from 'marked';
import PhotoModal from './PhotoModal.astro';
import '../styles/photo-gallery.css';
import '../styles/carousel.css';

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
// const t = useTranslations(lang); // Unused

// Get profile data from content collection
const profileData = await getCollection('profile');
const profileInfo = profileData.length > 0 ? profileData[0].data : null;
const sideProjects = profileInfo?.sideProjects || {};

// Get titles and descriptions based on language
const titles = sideProjects.titles?.[lang] || sideProjects.titles?.en || {};
const descriptions = sideProjects.descriptions?.[lang] || sideProjects.descriptions?.en || {};
const embeds = sideProjects.embeds || {};

// Process markdown in descriptions
const processMarkdown = (text: string) => {
  if (!text) return '';
  // Configure marked to only allow certain markdown features (bold, italic)
  marked.setOptions({
    gfm: true,
    breaks: true
  });
  return marked.parse(text);
};

// Get all images using Astro.glob
const galleryImageModules = await Astro.glob('/public/images/HomePhotoGallery/*.{jpg,jpeg,png}');
const galleryImages = galleryImageModules.map(module => module.default.src);
---

<div class="side-projects-container">
  <h2 class="section-title">{titles.section || (lang === 'pt' ? 'Projetos Paralelos' : 'Side Projects')}</h2>
  
  <!-- Podcast Section -->
  <div class="project-container">
    <h3 class="subsection-title">{titles.podcast || 'Podcast'}</h3>
    <p class="section-description" set:html={processMarkdown(descriptions.podcast || '')}></p>
    <div class="podcast-embed">
      <iframe 
        style="border-radius:12px; border: 0;" 
        src={embeds.podcast?.src || "https://open.spotify.com/embed/show/4lj3PvhecSWd5wUJAF3Lk6?utm_source=generator&theme=0"} 
        width={embeds.podcast?.width || "100%"} 
        height={embeds.podcast?.height || "352"} 
        allowfullscreen
        allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
        loading="lazy"
        fetchpriority="low"
        class="media-iframe"
        onload="this.parentNode.classList.add('loaded')"
        onerror="this.parentNode.classList.add('error')"
        title="Mesa do Canto Podcast"
      ></iframe>
      <div class="iframe-loading">Loading...</div>
      <div class="iframe-error">Sorry, content couldn't be loaded. Please try again later.</div>
    </div>
  </div>
  
  <!-- DJ Sets Section -->
  <div class="project-container">
    <h3 class="subsection-title">{titles.dj || (lang === 'pt' ? 'Sets Recentes' : 'Latest Sets')}</h3>
    <p class="section-description" set:html={processMarkdown(descriptions.dj || '')}></p>
    <div class="sets-carousel">
      <button class="carousel-arrow prev" aria-label="Previous set">&#60;</button>
      <div class="carousel-container">
        <div class="carousel-track">
          {embeds.dj?.map((set: { src: string, title?: string }, index: number) => (
            <div class="carousel-item">
              <div class="iframe-container" data-index={index}>
                {index === 0 ? (
                  <iframe 
                    width="100%" 
                    height="120" 
                    src={set.src} 
                    style="border: 0;" 
                    title={set.title || `Set ${index + 1}`}
                    loading="lazy"
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                ) : (
                  <iframe 
                    width="100%" 
                    height="120" 
                    data-src={set.src} 
                    style="border: 0;" 
                    title={set.title || `Set ${index + 1}`}
                    loading="lazy"
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                )}
                <div class="iframe-loading">Loading...</div>
                <div class="iframe-error">Sorry, content couldn't be loaded.</div>
              </div>
            </div>
          )) || (
            <>
              <div class="carousel-item">
                <div class="iframe-container" data-index="0">
                  <iframe width="100%" height="120" src="https://player-widget.mixcloud.com/widget/iframe/?hide_cover=1&feed=%2Fricardo-almeida28%2Fnadar%2F" style="border: 0;" title="Nadar" class="media-iframe" loading="lazy" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
              </div>
              <div class="carousel-item">
                <div class="iframe-container" data-index="1">
                  <iframe width="100%" height="120" data-src="https://player-widget.mixcloud.com/widget/iframe/?hide_cover=1&feed=%2Fricardo-almeida28%2Ffenix%2F" style="border: 0;" title="Fenix" class="media-iframe" loading="lazy" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
              </div>
              <div class="carousel-item">
                <div class="iframe-container" data-index="2">
                  <iframe width="100%" height="120" data-src="https://player-widget.mixcloud.com/widget/iframe/?hide_cover=1&feed=%2Fricardo-almeida28%2Flejos%2F" style="border: 0;" title="Lejos" class="media-iframe" loading="lazy" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
      <button class="carousel-arrow next" aria-label="Next set">&#62;</button>
    </div>
  </div>

  <!-- Playlists Section -->
  <div class="project-container">
    <h3 class="subsection-title">{titles.playlists || (lang === 'pt' ? 'As Minhas Playlists' : 'My Playlists')}</h3>
    <p class="section-description" set:html={processMarkdown(descriptions.playlistsIntro || '')}></p>
    <div class="playlists-carousel">
      <button class="carousel-arrow playlist-prev" aria-label="Previous playlist">&#60;</button>
      <div class="playlists-container">
        <div class="playlists-track">
          {embeds.playlists?.map((playlist: { src: string, title?: string, description?: {en: string, pt: string} }, index: number) => (
            <div class="playlist-item">
              <div class="iframe-container" data-index={index}>
                {index === 0 ? (
                  <iframe 
                    style="border-radius:12px; border: 0;" 
                    src={playlist.src} 
                    width="100%" 
                    height="352" 
                    allowfullscreen
                    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                    loading="lazy" 
                    title={playlist.title || `Playlist ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                ) : (
                  <iframe 
                    style="border-radius:12px; border: 0;" 
                    data-src={playlist.src} 
                    width="100%" 
                    height="352" 
                    allowfullscreen
                    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                    loading="lazy" 
                    title={playlist.title || `Playlist ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                )}
                <div class="iframe-loading">Loading...</div>
                <div class="iframe-error">Sorry, content couldn't be loaded.</div>
              </div>
              {playlist.description && (
                <div class="playlist-info">
                  <p class="playlist-description" set:html={processMarkdown(playlist.description?.[lang] || playlist.description?.en)}></p>
                </div>
              )}
            </div>
          )) || (
            <>
              <div class="playlist-item">
                <div class="iframe-container" data-index="0">
                  <iframe style="border-radius:12px; border: 0;" src="https://open.spotify.com/embed/playlist/2EOgO6HyRqoFVyoS5DeGHg?utm_source=generator&theme=0" width="100%" height="352" allowfullscreen allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy" title="Dem beats" class="media-iframe" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
                <div class="playlist-info">
                  <p class="playlist-description">{lang === 'pt' ? 'Instrumentais suaves de jazz-hop para foco e relaxamento' : 'Mellow jazz-hop instrumentals for focus and relaxation'}</p>
                </div>
              </div>
              <div class="playlist-item">
                <div class="iframe-container" data-index="1">
                  <iframe style="border-radius:12px; border: 0;" data-src="https://open.spotify.com/embed/playlist/0yWK4qg5GYnriJbJVVq159?utm_source=generator&theme=0" width="100%" height="352" allowfullscreen allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy" title="The random rock assortment" class="media-iframe" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
                <div class="playlist-info">
                  <p class="playlist-description">{lang === 'pt' ? 'Faixas essenciais de rock abrangendo os géneros stoner, indie e alternativo' : 'Essential rock tracks spanning stoner, indie, and alternative genres'}</p>
                </div>
              </div>
              <div class="playlist-item">
                <div class="iframe-container" data-index="2">
                  <iframe style="border-radius:12px; border: 0;" data-src="https://open.spotify.com/embed/playlist/3YAOE2K50HfP25uBowFRJJ?utm_source=generator&theme=0" width="100%" height="352" allowfullscreen allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy" title="Hip hop stash" class="media-iframe" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
                <div class="playlist-info">
                  <p class="playlist-description">{lang === 'pt' ? 'Coleção curada com boom bap, hip hop consciente e abstrato' : 'Curated collection featuring boom bap, conscious and abstract hip hop'}</p>
                </div>
              </div>
              <div class="playlist-item">
                <div class="iframe-container" data-index="3">
                  <iframe style="border-radius:12px; border: 0;" data-src="https://open.spotify.com/embed/playlist/1I43vFQgN7QBtCm8YLEJSd?utm_source=generator&theme=0" width="100%" height="352" allowfullscreen allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy" title="Jazz café" class="media-iframe" onload="this.parentNode.classList.add('loaded')" onerror="this.parentNode.classList.add('error')"></iframe>
                  <div class="iframe-loading">Loading...</div>
                  <div class="iframe-error">Sorry, content couldn't be loaded.</div>
                </div>
                <div class="playlist-info">
                  <p class="playlist-description">{lang === 'pt' ? 'Clássicos atemporais de jazz e composições contemporâneas' : 'Timeless jazz classics and contemporary compositions'}</p>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
      <button class="carousel-arrow playlist-next" aria-label="Next playlist">&#62;</button>
    </div>
  </div>

  <!-- Photography Section -->
  <div class="project-container">
    <h3 class="subsection-title">{titles.photography || (lang === 'pt' ? 'Fotografia' : 'Photography')}</h3>
    <p class="section-description" set:html={processMarkdown(descriptions.photography || '')}></p>
    <div class="photo-gallery">
      {galleryImages.map((image, index) => (
        <div class="photo-item" data-index={index}>
          <img 
            src={image} 
            alt={`Photo ${index + 1}`} 
            loading={index < 3 ? "eager" : "lazy"}
            width="300"
            height="400"
            oncontextmenu="return false;"
          />
        </div>
      ))}
    </div>
  </div>
</div>

<!-- Include the Photo Modal component -->
<PhotoModal />

<style>
  /* User selection disable */
  .side-projects-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 4rem 0;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  .section-title {
    font-size: var(--font-size-2xl);
    color: var(--color-cosmic-latte);
    margin-bottom: 2rem;
    font-family: var(--font-family-title);
  }

  .project-container {
    margin-bottom: 4rem;
  }

  .project-container:last-child {
    margin-bottom: 0;
  }

  .subsection-title {
    font-size: var(--font-size-xl);
    color: var(--color-cosmic-latte);
    margin-bottom: 1rem;
    font-family: var(--font-family-title);
  }

  .section-description {
    margin-bottom: 2rem;
    line-height: var(--line-height-loose);
  }

  /* Sets Carousel Styles */
  .sets-carousel {
    display: flex;
    align-items: center;
    gap: 1rem;
    width: 100%;
    max-width: 100%;
  }

  .carousel-container {
    flex: 1;
    overflow: hidden;
    width: 100%;
  }

  .carousel-track {
    display: flex;
    transition: transform 0.3s ease;
  }

  .carousel-item {
    flex: 0 0 100%;
    padding: 0 0.5rem;
  }

  .carousel-arrow {
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    font-size: 1.5rem;
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }

  .carousel-arrow:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  /* Playlists Carousel Styles */
  .playlists-carousel {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .playlists-container {
    flex: 1;
    overflow: hidden;
  }

  .playlists-track {
    display: flex;
    transition: transform 0.3s ease;
  }

  .playlist-item {
    flex: 0 0 100%;
    padding: 0 0.5rem;
  }

  .playlist-arrow {
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    font-size: 1.5rem;
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }

  .playlist-arrow:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  /* Photo Gallery Styles */
  .photo-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .photo-item {
    position: relative;
    aspect-ratio: 3/4;
    overflow: hidden;
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .photo-item:hover {
    transform: scale(1.02);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
  }

  .photo-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Responsive Styles */
  @media (max-width: 768px) {
    .section-container {
      padding: 0;
    }

    .playlists-carousel {
      flex-direction: row;
    }

    .playlist-item {
      flex: 0 0 100%;
      width: 100%;
    }

    .sets-carousel,
    .playlists-carousel {
      padding: 0 1rem;
    }

    .carousel-container,
    .playlists-container {
      width: 100%;
      overflow-x: auto;
      overflow-y: hidden;
      -webkit-overflow-scrolling: touch;
      scroll-snap-type: x mandatory;
      padding-bottom: 1rem;
    }

    .carousel-track,
    .playlists-track {
      display: flex;
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
    }

    .carousel-item,
    .playlist-item {
      scroll-snap-align: start;
      flex: 0 0 100%;
      width: 100%;
    }

    .photo-gallery {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
      padding: 0 0.5rem;
      margin: 0 auto;
    }
  }

  @media (max-width: 480px) {
    .section-title {
      font-size: var(--font-size-xl);
    }

    .subsection-title {
      font-size: var(--font-size-lg);
    }

    .sets-carousel,
    .playlists-carousel {
      flex-direction: column;
      gap: 0.5rem;
    }

    .carousel-arrow,
    .carousel-arrow.playlist-prev,
    .carousel-arrow.playlist-next {
      display: none;
    }
  }

  .podcast-embed, .iframe-container {
    position: relative;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 12px;
    min-height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .podcast-embed .media-iframe, .iframe-container .media-iframe {
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  .podcast-embed.loaded .media-iframe, .iframe-container.loaded .media-iframe {
    opacity: 1;
  }

  .iframe-loading, .iframe-error {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 8px;
    z-index: 1;
  }

  .iframe-error {
    display: none;
    color: #ff6b6b;
  }

  .podcast-embed.loaded .iframe-loading, .iframe-container.loaded .iframe-loading {
    display: none;
  }

  .podcast-embed.error .iframe-loading, .iframe-container.error .iframe-loading {
    display: none;
  }

  .podcast-embed.error .iframe-error, .iframe-container.error .iframe-error {
    display: block;
  }

  .playlist-info {
    margin-top: 0.75rem;
    padding: 0 0.5rem;
  }

  .playlist-description {
    font-size: var(--font-size-sm);
    color: var(--color-gray-600);
    margin-bottom: 0.5rem;
    line-height: 1.4;
    max-width: 90%;
    margin-left: auto;
    margin-right: auto;
  }
</style>

<script>
  /**
   * Loads the iframe content for a given index
   * @param {number} index - The index of the item to load
   * @param {string} carouselType - Either 'sets' or 'playlists'
   */
  function loadIframeContent(index: number, carouselType: string) {
    // Find the container based on carousel type
    const containerSelector = carouselType === 'sets' ? '.carousel-track' : '.playlists-track';
    const container = document.querySelector(containerSelector);
    
    if (!container) return;
    
    // Find the iframe container with the matching index
    const iframeContainer = container.querySelector(`.iframe-container[data-index="${index}"]`);
    
    if (!iframeContainer) return;
    
    // Find the iframe within this container
    const iframe = iframeContainer.querySelector('iframe');
    
    if (!iframe || !iframe.dataset.src) return;
    
    // Set the src from data-src to load the content
    iframe.src = iframe.dataset.src;
    
    // Remove the data-src attribute so we don't load it again
    iframe.removeAttribute('data-src');
  }

  // When using PhotoModal component, set up click handlers to use window.openPhotoModal
  document.addEventListener('DOMContentLoaded', () => {
    // Set up photo item clicks to open the modal
    const photoItems = document.querySelectorAll('.photo-item');
    photoItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        if (typeof window.openPhotoModal === 'function') {
          window.openPhotoModal(index);
        }
      });
    });
  });

  // Add touch swipe functionality for mobile
  document.addEventListener('DOMContentLoaded', () => {
    const carouselTracks = document.querySelectorAll('.carousel-track, .playlists-track');
    
    carouselTracks.forEach(track => {
      let startX: number, startScrollLeft: number, isDragging = false;
      // Remove unused variable
      // let startY: number;

      const startDrag = (e: MouseEvent | TouchEvent) => {
        isDragging = true;
        startX = 'touches' in e ? e.touches[0].pageX : e.pageX;
        // startY = 'touches' in e ? e.touches[0].pageY : e.pageY; // Not used
        startScrollLeft = (track.parentElement as HTMLElement).scrollLeft;
      }

      const drag = (e: MouseEvent | TouchEvent) => {
        if (!isDragging) return;
        e.preventDefault();
        const x = 'touches' in e ? e.touches[0].pageX : e.pageX;
        // Remove unused variable
        // const y = 'touches' in e ? e.touches[0].pageY : e.pageY;
        
        // Calculate horizontal scroll based on drag distance
        const deltaX = x - startX;
        (track.parentElement as HTMLElement).scrollLeft = startScrollLeft - deltaX;
      }

      const endDrag = () => {
        isDragging = false;
      }

      // Mouse events
      track.addEventListener('mousedown', startDrag);
      track.addEventListener('mousemove', drag);
      track.addEventListener('mouseup', endDrag);
      track.addEventListener('mouseleave', endDrag);
      
      // Touch events
      track.addEventListener('touchstart', startDrag as EventListener);
      track.addEventListener('touchmove', drag as EventListener);
      track.addEventListener('touchend', endDrag);
    });
  });

  // Carousel functionality
  const carouselTrack = document.querySelector('.carousel-track') as HTMLElement;
  const carouselItems = document.querySelectorAll('.carousel-item');
  const carouselPrevBtn = document.querySelector('.carousel-arrow.prev') as HTMLButtonElement;
  const carouselNextBtn = document.querySelector('.carousel-arrow.next') as HTMLButtonElement;
  
  let currentIndex = 0;

  function updateCarousel() {
    if (carouselTrack) {
      const percentage = currentIndex * -100;
      carouselTrack.style.transform = `translateX(${percentage}%)`;
      
      // Update button states
      if (carouselPrevBtn) carouselPrevBtn.disabled = currentIndex === 0;
      if (carouselNextBtn) carouselNextBtn.disabled = currentIndex === carouselItems.length - 1;
      
      // Load the current iframe content
      loadIframeContent(currentIndex, 'sets');
      
      // Preload the next iframe content (for smoother transitions)
      if (currentIndex < carouselItems.length - 1) {
        loadIframeContent(currentIndex + 1, 'sets');
      }
    }
  }

  carouselPrevBtn?.addEventListener('click', () => {
    if (currentIndex > 0) {
      currentIndex--;
      updateCarousel();
    }
  });

  carouselNextBtn?.addEventListener('click', () => {
    if (currentIndex < carouselItems.length - 1) {
      currentIndex++;
      updateCarousel();
    }
  });

  // Initialize carousel
  updateCarousel();

  // Playlists Carousel functionality
  const playlistsTrack = document.querySelector('.playlists-track') as HTMLElement;
  const playlistItems = document.querySelectorAll('.playlist-item');
  const playlistPrevBtn = document.querySelector('.carousel-arrow.playlist-prev') as HTMLButtonElement;
  const playlistNextBtn = document.querySelector('.carousel-arrow.playlist-next') as HTMLButtonElement;
  
  let currentPlaylistIndex = 0;

  function updatePlaylistCarousel() {
    if (playlistsTrack) {
      const percentage = currentPlaylistIndex * -100;
      playlistsTrack.style.transform = `translateX(${percentage}%)`;
      
      // Update button states
      if (playlistPrevBtn) playlistPrevBtn.disabled = currentPlaylistIndex === 0;
      if (playlistNextBtn) playlistNextBtn.disabled = currentPlaylistIndex === playlistItems.length - 1;
      
      // Load the current iframe content
      loadIframeContent(currentPlaylistIndex, 'playlists');
      
      // Preload the next iframe content (for smoother transitions)
      if (currentPlaylistIndex < playlistItems.length - 1) {
        loadIframeContent(currentPlaylistIndex + 1, 'playlists');
      }
    }
  }

  playlistPrevBtn?.addEventListener('click', () => {
    if (currentPlaylistIndex > 0) {
      currentPlaylistIndex--;
      updatePlaylistCarousel();
    }
  });

  playlistNextBtn?.addEventListener('click', () => {
    if (currentPlaylistIndex < playlistItems.length - 1) {
      currentPlaylistIndex++;
      updatePlaylistCarousel();
    }
  });

  // Initialize playlist carousel
  updatePlaylistCarousel();
</script> 