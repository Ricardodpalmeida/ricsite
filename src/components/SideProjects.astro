---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { getCollection } from 'astro:content';
import { marked } from 'marked';
import PhotoModal from './PhotoModal.astro';
import '../styles/photo-gallery.css';
import '../styles/carousel.css';
import '../styles/side-projects.css';

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get profile data from content collection
const profileData = await getCollection('profile');
const profileEntry = profileData.find(entry => entry.data.language === lang);
const profileInfo = profileEntry?.data || null;
const sideProjects = profileInfo?.sideProjects || {};
const sectionDescription = profileInfo?.sectionDescriptions?.sideProjects || '';

// Process markdown in descriptions
const processMarkdown = (text: string) => {
  if (!text) return '';
  // Configure marked to only allow certain markdown features (bold, italic)
  marked.setOptions({
    gfm: true,
    breaks: true
  });
  return marked.parse(text);
};

// Get all images using Astro.glob
const galleryImageModules = await Astro.glob('/public/images/HomePhotoGallery/*.{jpg,jpeg,png}');
const galleryImages = galleryImageModules.map(module => module.default.src);
---

<div class="side-projects-container">
  <h2 class="section-title">{sideProjects.titles?.section || (lang === 'pt' ? 'Projetos Paralelos' : 'Side Projects')}</h2>
  
  {sectionDescription && <p class="section-intro">{sectionDescription}</p>}
  
  <!-- Podcast Section -->
  <div class="project-container">
    <h3 class="subsection-title">{sideProjects.titles?.podcast || 'Podcast'}</h3>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.podcast || '')}></p>
    <div class="podcast-embed">
      <iframe 
        style="border-radius:12px; border: 0;" 
        src={sideProjects.embeds?.podcast?.src || "https://open.spotify.com/embed/show/4lj3PvhecSWd5wUJAF3Lk6?utm_source=generator&theme=0"} 
        width={sideProjects.embeds?.podcast?.width || "100%"} 
        height={sideProjects.embeds?.podcast?.height || "352"} 
        allowfullscreen
        allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
        loading="lazy"
        fetchpriority="low"
        class="media-iframe"
        onload="this.parentNode.classList.add('loaded')"
        onerror="this.parentNode.classList.add('error')"
        title="Mesa do Canto Podcast"
      ></iframe>
      <div class="iframe-loading">Loading...</div>
      <div class="iframe-error">Sorry, content couldn't be loaded. Please try again later.</div>
    </div>
  </div>
  
  <!-- DJ Sets Section -->
  <div class="project-container">
    <h3 class="subsection-title">{sideProjects.titles?.dj || (lang === 'pt' ? 'Sets Recentes' : 'Latest Sets')}</h3>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.dj || '')}></p>
    <div class="sets-carousel">
      <button class="carousel-arrow prev" aria-label={t('carousel.previous')}>&#60;</button>
      <div class="carousel-container">
        <div class="carousel-track">
          {sideProjects.embeds?.dj?.map((set: { src: string, title?: string }, index: number) => (
            <div class="carousel-item">
              <div class="iframe-container" data-index={index}>
                {index === 0 ? (
                  <iframe 
                    width="100%" 
                    height="120" 
                    src={set.src} 
                    style="border: 0;" 
                    title={set.title || `Set ${index + 1}`}
                    loading="lazy"
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                ) : (
                  <iframe 
                    width="100%" 
                    height="120" 
                    data-src={set.src} 
                    style="border: 0;" 
                    title={set.title || `Set ${index + 1}`}
                    loading="lazy"
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                )}
                <div class="iframe-loading">Loading...</div>
                <div class="iframe-error">Sorry, content couldn't be loaded.</div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <button class="carousel-arrow next" aria-label={t('carousel.next')}>&#62;</button>
    </div>
  </div>

  <!-- Playlists Section -->
  <div class="project-container">
    <h3 class="subsection-title">{sideProjects.titles?.playlists || (lang === 'pt' ? 'As Minhas Playlists' : 'My Playlists')}</h3>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.playlistsIntro || '')}></p>
    <div class="playlists-carousel">
      <button class="carousel-arrow playlist-prev" aria-label={t('carousel.previousPlaylist')}>&#60;</button>
      <div class="playlists-container">
        <div class="playlists-track">
          {sideProjects.embeds?.playlists?.map((playlist: { src: string, title?: string, description?: string }, index: number) => (
            <div class="playlist-item">
              <div class="iframe-container" data-index={index}>
                {index === 0 ? (
                  <iframe 
                    style="border-radius:12px; border: 0;" 
                    src={playlist.src} 
                    width="100%" 
                    height="352" 
                    allowfullscreen
                    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                    loading="lazy" 
                    title={playlist.title || `Playlist ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                ) : (
                  <iframe 
                    style="border-radius:12px; border: 0;" 
                    data-src={playlist.src} 
                    width="100%" 
                    height="352" 
                    allowfullscreen
                    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                    loading="lazy" 
                    title={playlist.title || `Playlist ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                )}
                <div class="iframe-loading">Loading...</div>
                <div class="iframe-error">Sorry, content couldn't be loaded.</div>
              </div>
              {playlist.description && (
                <div class="playlist-info">
                  <p class="playlist-description" set:html={processMarkdown(playlist.description)}></p>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
      <button class="carousel-arrow playlist-next" aria-label={t('carousel.nextPlaylist')}>&#62;</button>
    </div>
  </div>

  <!-- Photography Section -->
  <div class="project-container">
    <h3 class="subsection-title">{sideProjects.titles?.photography || (lang === 'pt' ? 'Fotografia' : 'Photography')}</h3>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.photography || '')}></p>
    <div class="photo-gallery">
      {galleryImages.map((image, index) => (
        <div class="photo-item" data-index={index}>
          <img 
            src={image} 
            alt={`Photo ${index + 1}`} 
            loading={index < 3 ? "eager" : "lazy"}
            width="300"
            height="400"
            oncontextmenu="return false;"
          />
        </div>
      ))}
    </div>
  </div>
</div>

<!-- Include the Photo Modal component -->
<PhotoModal />

<script>
  /**
   * Loads the iframe content for a given index
   * @param {number} index - The index of the item to load
   * @param {string} carouselType - Either 'sets' or 'playlists'
   */
  function loadIframeContent(index: number, carouselType: string) {
    // Find the container based on carousel type
    const containerSelector = carouselType === 'sets' ? '.carousel-track' : '.playlists-track';
    const container = document.querySelector(containerSelector);
    
    if (!container) return;
    
    // Find the iframe container with the matching index
    const iframeContainer = container.querySelector(`.iframe-container[data-index="${index}"]`);
    
    if (!iframeContainer) return;
    
    // Find the iframe within this container
    const iframe = iframeContainer.querySelector('iframe');
    
    if (!iframe || !iframe.dataset.src) return;
    
    // Set the src from data-src to load the content
    iframe.src = iframe.dataset.src;
    
    // Remove the data-src attribute so we don't load it again
    iframe.removeAttribute('data-src');
  }

  // When using PhotoModal component, set up click handlers to use window.openPhotoModal
  document.addEventListener('DOMContentLoaded', () => {
    // Set up photo item clicks to open the modal
    const photoItems = document.querySelectorAll('.photo-item');
    photoItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        if (typeof window.openPhotoModal === 'function') {
          window.openPhotoModal(index);
        }
      });
    });
  });

  // Add touch swipe functionality for mobile
  document.addEventListener('DOMContentLoaded', () => {
    const carouselTracks = document.querySelectorAll('.carousel-track, .playlists-track');
    
    carouselTracks.forEach(track => {
      let startX: number, startScrollLeft: number, isDragging = false;
      // Remove unused variable
      // let startY: number;

      const startDrag = (e: MouseEvent | TouchEvent) => {
        isDragging = true;
        startX = 'touches' in e ? e.touches[0].pageX : e.pageX;
        // startY = 'touches' in e ? e.touches[0].pageY : e.pageY; // Not used
        startScrollLeft = (track.parentElement as HTMLElement).scrollLeft;
      }

      const drag = (e: MouseEvent | TouchEvent) => {
        if (!isDragging) return;
        e.preventDefault();
        const x = 'touches' in e ? e.touches[0].pageX : e.pageX;
        // Remove unused variable
        // const y = 'touches' in e ? e.touches[0].pageY : e.pageY;
        
        // Calculate horizontal scroll based on drag distance
        const deltaX = x - startX;
        (track.parentElement as HTMLElement).scrollLeft = startScrollLeft - deltaX;
      }

      const endDrag = () => {
        isDragging = false;
      }

      // Mouse events
      track.addEventListener('mousedown', startDrag);
      track.addEventListener('mousemove', drag);
      track.addEventListener('mouseup', endDrag);
      track.addEventListener('mouseleave', endDrag);
      
      // Touch events
      track.addEventListener('touchstart', startDrag as EventListener);
      track.addEventListener('touchmove', drag as EventListener);
      track.addEventListener('touchend', endDrag);
    });
  });

  // Carousel functionality
  const carouselTrack = document.querySelector('.carousel-track') as HTMLElement;
  const carouselItems = document.querySelectorAll('.carousel-item');
  const carouselPrevBtn = document.querySelector('.carousel-arrow.prev') as HTMLButtonElement;
  const carouselNextBtn = document.querySelector('.carousel-arrow.next') as HTMLButtonElement;
  
  let currentIndex = 0;

  function updateCarousel() {
    if (carouselTrack) {
      const percentage = currentIndex * -100;
      carouselTrack.style.transform = `translateX(${percentage}%)`;
      
      // Update button states
      if (carouselPrevBtn) carouselPrevBtn.disabled = currentIndex === 0;
      if (carouselNextBtn) carouselNextBtn.disabled = currentIndex === carouselItems.length - 1;
      
      // Load the current iframe content
      loadIframeContent(currentIndex, 'sets');
      
      // Preload the next iframe content (for smoother transitions)
      if (currentIndex < carouselItems.length - 1) {
        loadIframeContent(currentIndex + 1, 'sets');
      }
    }
  }

  carouselPrevBtn?.addEventListener('click', () => {
    if (currentIndex > 0) {
      currentIndex--;
      updateCarousel();
    }
  });

  carouselNextBtn?.addEventListener('click', () => {
    if (currentIndex < carouselItems.length - 1) {
      currentIndex++;
      updateCarousel();
    }
  });

  // Initialize carousel
  updateCarousel();

  // Playlists Carousel functionality
  const playlistsTrack = document.querySelector('.playlists-track') as HTMLElement;
  const playlistItems = document.querySelectorAll('.playlist-item');
  const playlistPrevBtn = document.querySelector('.carousel-arrow.playlist-prev') as HTMLButtonElement;
  const playlistNextBtn = document.querySelector('.carousel-arrow.playlist-next') as HTMLButtonElement;
  
  let currentPlaylistIndex = 0;

  function updatePlaylistCarousel() {
    if (playlistsTrack) {
      const percentage = currentPlaylistIndex * -100;
      playlistsTrack.style.transform = `translateX(${percentage}%)`;
      
      // Update button states
      if (playlistPrevBtn) playlistPrevBtn.disabled = currentPlaylistIndex === 0;
      if (playlistNextBtn) playlistNextBtn.disabled = currentPlaylistIndex === playlistItems.length - 1;
      
      // Load the current iframe content
      loadIframeContent(currentPlaylistIndex, 'playlists');
      
      // Preload the next iframe content (for smoother transitions)
      if (currentPlaylistIndex < playlistItems.length - 1) {
        loadIframeContent(currentPlaylistIndex + 1, 'playlists');
      }
    }
  }

  playlistPrevBtn?.addEventListener('click', () => {
    if (currentPlaylistIndex > 0) {
      currentPlaylistIndex--;
      updatePlaylistCarousel();
    }
  });

  playlistNextBtn?.addEventListener('click', () => {
    if (currentPlaylistIndex < playlistItems.length - 1) {
      currentPlaylistIndex++;
      updatePlaylistCarousel();
    }
  });

  // Initialize playlist carousel
  updatePlaylistCarousel();
</script> 