---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { getCollection } from 'astro:content';
import { marked } from 'marked';
import PhotoModal from './PhotoModal.astro';
import '../styles/photo-gallery.css';
import '../styles/carousel.css';
import '../styles/side-projects.css';

// Define TypeScript interfaces
interface Embed {
  src: string;
  title?: string;
  description?: string;
}

interface SideProjectsData {
  titles?: {
    section?: string;
    podcast?: string;
    dj?: string;
    playlists?: string;
    photography?: string;
  };
  descriptions?: {
    podcast?: string;
    dj?: string;
    playlistsIntro?: string;
    photography?: string;
  };
  embeds?: {
    podcast?: Embed;
    dj?: Embed[];
    playlists?: Embed[];
  };
}

// Get current language and translations
const { currentLanguage, profileData } = Astro.props;
const lang = currentLanguage || getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Process markdown in descriptions
const processMarkdown = (text: string) => {
  if (!text) return '';
  // Configure marked to only allow certain markdown features (bold, italic)
  marked.setOptions({
    gfm: true,
    breaks: true
  });
  return marked.parse(text);
};

// Get profile data if not provided through props
let profileInfo: any = null;
let sideProjects: any = {};
let sectionDescription = '';

if (profileData) {
  profileInfo = profileData;
  sideProjects = profileData.sideProjects || {};
  sectionDescription = profileData.sectionDescriptions?.sideProjects || '';
} else {
  // Fallback to fetching data directly if not provided as props
  const profileCollection = await getCollection('profile');
  const profileEntry = profileCollection.find(entry => entry.data.language === lang);
  profileInfo = profileEntry?.data || null;
  sideProjects = profileInfo?.sideProjects || {};
  sectionDescription = profileInfo?.sectionDescriptions?.sideProjects || '';
}

// Get all images using Astro.glob
const galleryImageModules = await Astro.glob('/public/images/HomePhotoGallery/*.{jpg,jpeg,png}');
const galleryImages = galleryImageModules.map(module => module.default.src);
---

<div class="side-projects-container">
  <!-- Podcast Section -->
  <section class="main-section" id="podcast">
    <h1 class="section-heading">{sideProjects.titles?.podcast || 'Podcast'}</h1>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.podcast || '')}></p>
    <div class="podcast-embed">
      <iframe 
        style="border-radius:12px"
        src={sideProjects.embeds?.podcast?.src || "https://open.spotify.com/embed/show/4lj3PvhecSWd5wUJAF3Lk6?utm_source=generator&theme=0"}
        width="100%"
        height="352"
        frameBorder="0"
        allowfullscreen=""
        allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
        loading="lazy"
        class="media-iframe"
        onload="this.parentNode.classList.add('loaded')"
        onerror="this.parentNode.classList.add('error')"
      ></iframe>
      <div class="iframe-loading">Loading...</div>
      <div class="iframe-error">Sorry, content couldn't be loaded. Please try again later.</div>
    </div>
  </section>
  
  <!-- DJ Sets Section -->
  <section class="main-section" id="dj-sets">
    <h1 class="section-heading">{sideProjects.titles?.dj || (lang === 'pt' ? 'Sets Recentes' : 'Latest Sets')}</h1>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.dj || '')}></p>
    <div class="sets-carousel">
      <button class="carousel-arrow prev" aria-label={t('carousel.previous')}>&#60;</button>
      <div class="carousel-container">
        <div class="carousel-track">
          {sideProjects.embeds?.dj?.map((set: { src: string, title?: string }, index: number) => (
            <div class="carousel-item">
              <div class="iframe-container" data-index={index}>
                {index === 0 ? (
                  <iframe 
                    width="100%"
                    height="120"
                    src={set.src}
                    frameborder="0"
                    loading="lazy"
                    title={set.title || `Set ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                ) : (
                  <iframe 
                    width="100%"
                    height="120"
                    data-src={set.src}
                    frameborder="0"
                    loading="lazy"
                    title={set.title || `Set ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                )}
                <div class="iframe-loading">Loading...</div>
                <div class="iframe-error">Sorry, content couldn't be loaded.</div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <button class="carousel-arrow next" aria-label={t('carousel.next')}>&#62;</button>
    </div>
  </section>

  <!-- Playlists Section -->
  <section class="main-section" id="playlists">
    <h1 class="section-heading">{sideProjects.titles?.playlists || (lang === 'pt' ? 'As Minhas Playlists' : 'My Playlists')}</h1>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.playlistsIntro || '')}></p>
    <div class="playlists-carousel">
      <button class="carousel-arrow prev" aria-label={t('carousel.previousPlaylist')}>&#60;</button>
      <div class="playlists-container">
        <div class="playlists-track">
          {sideProjects.embeds?.playlists?.map((playlist: { src: string, title?: string, description?: string }, index: number) => (
            <div class="playlist-item">
              <div class="iframe-container" data-index={index}>
                {index === 0 ? (
                  <iframe 
                    style="border-radius:12px"
                    src={playlist.src}
                    width="100%"
                    height="352"
                    frameBorder="0"
                    allowfullscreen=""
                    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                    loading="lazy"
                    title={playlist.title || `Playlist ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                ) : (
                  <iframe 
                    style="border-radius:12px"
                    data-src={playlist.src}
                    width="100%"
                    height="352"
                    frameBorder="0"
                    allowfullscreen=""
                    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                    loading="lazy"
                    title={playlist.title || `Playlist ${index + 1}`}
                    class="media-iframe"
                    onload="this.parentNode.classList.add('loaded')"
                    onerror="this.parentNode.classList.add('error')"
                  ></iframe>
                )}
                <div class="iframe-loading">Loading...</div>
                <div class="iframe-error">Sorry, content couldn't be loaded.</div>
              </div>
              {playlist.description && (
                <div class="playlist-info">
                  <p class="playlist-description" set:html={processMarkdown(playlist.description)}></p>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
      <button class="carousel-arrow next" aria-label={t('carousel.nextPlaylist')}>&#62;</button>
    </div>
  </section>

  <!-- Photography Section -->
  <section class="main-section" id="photography">
    <h1 class="section-heading">{sideProjects.titles?.photography || (lang === 'pt' ? 'Fotografia' : 'Photography')}</h1>
    <p class="section-description" set:html={processMarkdown(sideProjects.descriptions?.photography || '')}></p>
    
    <div class="photos-carousel">
      <button class="carousel-arrow prev" aria-label={t('carousel.previous') || 'Previous photo'}>&#60;</button>
      <div class="carousel-container">
        <div class="carousel-track photos-track">
          {galleryImages.map((image, index) => (
            <div class="photo-carousel-item" data-index={index}>
              <img 
                src={image} 
                alt={`${t('photo.alt') || 'Photo'} ${index + 1}`}
                loading={index < 3 ? "eager" : "lazy"}
                class="gallery-image"
                data-orientation="detect" 
                onload="detectImageOrientation(this)"
              />
            </div>
          ))}
        </div>
      </div>
      <button class="carousel-arrow next" aria-label={t('carousel.next') || 'Next photo'}>&#62;</button>
    </div>
  </section>
</div>

<!-- Include the Photo Modal component -->
<PhotoModal />

<script>
  // Type declarations for global functions
  declare global {
    interface Window {
      openPhotoModal: (index: number) => void;
    }
  }

  /**
   * Detect the orientation of an image
   */
  function detectImageOrientation(img: HTMLImageElement) {
    if (!img) return;
    
    if (img.naturalWidth && img.naturalHeight) {
      const ratio = img.naturalWidth / img.naturalHeight;
      let orientation = 'square';
      
      if (ratio > 1.2) {
        orientation = 'horizontal';
      } else if (ratio < 0.8) {
        orientation = 'vertical';
      }
      
      img.setAttribute('data-orientation', orientation);
      
      const parentElement = img.parentElement;
      if (parentElement) {
        parentElement.setAttribute('data-orientation', orientation);
        parentElement.classList.add(orientation);
      }
    }
  }

  /**
   * Load iframe content
   */
  function loadIframeContent(index: number, carouselType: string) {
    const containerSelector = carouselType === 'sets' ? '#dj-sets .carousel-track' : '#playlists .playlists-track';
    const container = document.querySelector(containerSelector);
    
    if (!container) return;
    
    const iframeContainer = container.querySelector(`.iframe-container[data-index="${index}"]`);
    
    if (!iframeContainer) return;
    
    const iframe = iframeContainer.querySelector('iframe');
    
    if (!iframe || !(iframe instanceof HTMLIFrameElement) || !iframe.dataset.src) return;
    
    iframe.src = iframe.dataset.src;
    iframe.removeAttribute('data-src');
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Photo Modal Setup
    const modal = document.getElementById('photoModal');
    const photoCarouselItems = document.querySelectorAll('.photo-carousel-item');
    
    if (!window.openPhotoModal && modal) {
      window.openPhotoModal = function(index: number) {
        const photoItems = document.querySelectorAll('.photo-carousel-item');
        if (!modal || index >= photoItems.length) return;
        
        const photoImg = photoItems[index].querySelector('img');
        if (!photoImg || !(photoImg instanceof HTMLImageElement)) return;
        
        const modalImg = modal.querySelector('.modal-content img');
        if (!modalImg || !(modalImg instanceof HTMLImageElement)) return;
        
        modalImg.src = photoImg.src;
        modalImg.alt = photoImg.alt || `Photo ${index + 1}`;
        
        modal.classList.add('active');
        
        if (document.body) {
          document.body.style.overflow = 'hidden';
        }
        
        modal.dataset.currentIndex = index.toString();
      };
    }
    
    photoCarouselItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        if (typeof window.openPhotoModal === 'function') {
          window.openPhotoModal(index);
        }
      });
    });
    
    // Photo Carousel functionality
    const photosTrack = document.querySelector('#photography .photos-track');
    const photoItems = document.querySelectorAll('#photography .photo-carousel-item');
    const photoPrevBtn = document.querySelector('#photography .carousel-arrow.prev');
    const photoNextBtn = document.querySelector('#photography .carousel-arrow.next');
    
    if (photosTrack && photoItems.length > 0 && photoPrevBtn && photoNextBtn) {
      let currentPhotoIndex = 0;
      
      function updatePhotoCarousel() {
        if (!(photosTrack instanceof HTMLElement)) return;
        
        // Calculate percentage based on vertical image logic
        const currentItem = photoItems[currentPhotoIndex];
        const orientation = currentItem.getAttribute('data-orientation') || '';
        const isVertical = orientation === 'vertical';
        
        // For vertical images, show 2 at once on desktop
        if (isVertical && window.innerWidth > 768) {
          // Start from an even index to ensure proper pairing
          currentPhotoIndex = Math.floor(currentPhotoIndex / 2) * 2;
          photosTrack.style.transform = `translateX(-${currentPhotoIndex * 50}%)`;
        } else {
          photosTrack.style.transform = `translateX(-${currentPhotoIndex * 100}%)`;
        }
      }
      
      photoPrevBtn.addEventListener('click', () => {
        if (currentPhotoIndex > 0) {
          currentPhotoIndex--;
        } else {
          // Go to last item if at first item
          currentPhotoIndex = photoItems.length - 1;
        }
        updatePhotoCarousel();
      });
      
      photoNextBtn.addEventListener('click', () => {
        if (currentPhotoIndex < photoItems.length - 1) {
          currentPhotoIndex++;
        } else {
          // Go to first item if at last item
          currentPhotoIndex = 0;
        }
        updatePhotoCarousel();
      });
      
      // Initialize
      updatePhotoCarousel();
      
      // Mobile touch swipe
      let touchStartX = 0;
      let touchEndX = 0;
      
      const handleSwipe = () => {
        const swipeThreshold = 50; 
        const swipeDistance = touchEndX - touchStartX;
        
        if (Math.abs(swipeDistance) > swipeThreshold) {
          if (swipeDistance > 0) {
            // Swipe right - go to previous
            if (currentPhotoIndex > 0) {
              currentPhotoIndex--;
            } else {
              // Circular navigation
              currentPhotoIndex = photoItems.length - 1;
            }
          } else {
            // Swipe left - go to next
            if (currentPhotoIndex < photoItems.length - 1) {
              currentPhotoIndex++;
            } else {
              // Circular navigation
              currentPhotoIndex = 0;
            }
          }
          updatePhotoCarousel();
        }
      };
      
      photosTrack.addEventListener('touchstart', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchStartX = e.changedTouches[0].screenX;
        }
      }, { passive: true });
      
      photosTrack.addEventListener('touchend', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }
      }, { passive: true });
    }
    
    // Sets Carousel functionality
    const carouselTrack = document.querySelector('#dj-sets .carousel-track');
    const carouselItems = document.querySelectorAll('#dj-sets .carousel-item');
    const carouselPrevBtn = document.querySelector('#dj-sets .carousel-arrow.prev');
    const carouselNextBtn = document.querySelector('#dj-sets .carousel-arrow.next');
   
    if (carouselTrack && carouselItems.length > 0) {
      let currentIndex = 0;
     
      function updateCarousel() {
        if (!(carouselTrack instanceof HTMLElement)) return;
        
        carouselTrack.style.transform = `translateX(-${currentIndex * 100}%)`;
        
        // Load the current iframe content
        loadIframeContent(currentIndex, 'sets');
        
        // Preload the next iframe content (for smoother transitions)
        if (currentIndex < carouselItems.length - 1) {
          loadIframeContent(currentIndex + 1, 'sets');
        }
      }
     
      if (carouselPrevBtn) {
        carouselPrevBtn.addEventListener('click', () => {
          if (currentIndex > 0) {
            currentIndex--;
          } else {
            // Go to last item if at first item
            currentIndex = carouselItems.length - 1;
          }
          updateCarousel();
        });
      }
     
      if (carouselNextBtn) {
        carouselNextBtn.addEventListener('click', () => {
          if (currentIndex < carouselItems.length - 1) {
            currentIndex++;
          } else {
            // Go to first item if at last item
            currentIndex = 0;
          }
          updateCarousel();
        });
      }
     
      // Initialize carousel
      updateCarousel();
      
      // Add touch swipe for sets carousel
      let touchStartX = 0;
      let touchEndX = 0;
      
      const handleSwipe = () => {
        const swipeThreshold = 50;
        const swipeDistance = touchEndX - touchStartX;
        
        if (Math.abs(swipeDistance) > swipeThreshold) {
          if (swipeDistance > 0) {
            // Swipe right - go to previous
            if (currentIndex > 0) {
              currentIndex--;
            } else {
              // Circular navigation
              currentIndex = carouselItems.length - 1;
            }
          } else {
            // Swipe left - go to next
            if (currentIndex < carouselItems.length - 1) {
              currentIndex++;
            } else {
              // Circular navigation
              currentIndex = 0;
            }
          }
          updateCarousel();
        }
      };
      
      carouselTrack.addEventListener('touchstart', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchStartX = e.changedTouches[0].screenX;
        }
      }, { passive: true });
      
      carouselTrack.addEventListener('touchend', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }
      }, { passive: true });
    }
   
    // Playlists Carousel functionality
    const playlistsTrack = document.querySelector('#playlists .playlists-track');
    const playlistItems = document.querySelectorAll('#playlists .playlist-item');
    const playlistPrevBtn = document.querySelector('#playlists .carousel-arrow.prev');
    const playlistNextBtn = document.querySelector('#playlists .carousel-arrow.next');
   
    if (playlistsTrack && playlistItems.length > 0) {
      let currentPlaylistIndex = 0;
     
      function updatePlaylistCarousel() {
        if (!(playlistsTrack instanceof HTMLElement)) return;
        
        playlistsTrack.style.transform = `translateX(-${currentPlaylistIndex * 100}%)`;
        
        // Load the current iframe content
        loadIframeContent(currentPlaylistIndex, 'playlists');
        
        // Preload the next iframe content (for smoother transitions)
        if (currentPlaylistIndex < playlistItems.length - 1) {
          loadIframeContent(currentPlaylistIndex + 1, 'playlists');
        }
      }
     
      if (playlistPrevBtn) {
        playlistPrevBtn.addEventListener('click', () => {
          if (currentPlaylistIndex > 0) {
            currentPlaylistIndex--;
          } else {
            // Go to last item if at first item
            currentPlaylistIndex = playlistItems.length - 1;
          }
          updatePlaylistCarousel();
        });
      }
     
      if (playlistNextBtn) {
        playlistNextBtn.addEventListener('click', () => {
          if (currentPlaylistIndex < playlistItems.length - 1) {
            currentPlaylistIndex++;
          } else {
            // Go to first item if at last item
            currentPlaylistIndex = 0;
          }
          updatePlaylistCarousel();
        });
      }
     
      // Initialize playlist carousel
      updatePlaylistCarousel();
      
      // Add touch swipe for playlists carousel
      let touchStartX = 0;
      let touchEndX = 0;
      
      const handleSwipe = () => {
        const swipeThreshold = 50;
        const swipeDistance = touchEndX - touchStartX;
        
        if (Math.abs(swipeDistance) > swipeThreshold) {
          if (swipeDistance > 0) {
            // Swipe right - go to previous
            if (currentPlaylistIndex > 0) {
              currentPlaylistIndex--;
            } else {
              // Circular navigation
              currentPlaylistIndex = playlistItems.length - 1;
            }
          } else {
            // Swipe left - go to next
            if (currentPlaylistIndex < playlistItems.length - 1) {
              currentPlaylistIndex++;
            } else {
              // Circular navigation
              currentPlaylistIndex = 0;
            }
          }
          updatePlaylistCarousel();
        }
      };
      
      playlistsTrack.addEventListener('touchstart', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchStartX = e.changedTouches[0].screenX;
        }
      }, { passive: true });
      
      playlistsTrack.addEventListener('touchend', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }
      }, { passive: true });
    }
  });
</script> 