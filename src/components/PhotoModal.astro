---
// Photo Modal Component
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import '../styles/photo-gallery.css';

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Photo Modal -->
<div class="photo-modal" id="photoModal">
  <button class="modal-close" aria-label={t('modal.close')}>Ã—</button>
  <button class="modal-nav prev" aria-label={t('modal.previousPhoto')}>&#60;</button>
  <button class="modal-nav next" aria-label={t('modal.nextPhoto')}>&#62;</button>
  <div class="modal-content">
    <img src="" alt="" oncontextmenu="return false;" />
  </div>
</div>

<script>
  // Add type definitions for window methods
  declare global {
    interface Window {
      openPhotoModal: (index: number) => void;
      closePhotoModal: () => void;
    }
  }

  // Photo Gallery Modal Functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('photoModal');
    const modalImg = modal?.querySelector('img');
    const modalCloseBtn = modal?.querySelector('.modal-close');
    const modalPrevBtn = modal?.querySelector('.modal-nav.prev');
    const modalNextBtn = modal?.querySelector('.modal-nav.next');
    const photoItems = document.querySelectorAll('.photo-item');
    let currentPhotoIndex = 0;
  
    window.openPhotoModal = function(index) {
      if (!modal || !modalImg) return;
      currentPhotoIndex = index;
      const photoSrc = photoItems[index]?.querySelector('img')?.src;
      if (photoSrc) {
        modalImg.src = photoSrc;
        modalImg.alt = `Photo ${index + 1}`;
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
      }
    }
  
    window.closePhotoModal = function() {
      if (!modal) return;
      modal.classList.remove('active');
      document.body.style.overflow = '';
    }
  
    function navigatePhoto(direction: 'prev' | 'next') {
      const newIndex = direction === 'prev' 
        ? Math.max(0, currentPhotoIndex - 1)
        : Math.min(photoItems.length - 1, currentPhotoIndex + 1);
      
      if (newIndex !== currentPhotoIndex) {
        window.openPhotoModal(newIndex);
      }
    }
  
    // Event Listeners
    photoItems.forEach((item, index) => {
      item.addEventListener('click', () => window.openPhotoModal(index));
    });
  
    modalCloseBtn?.addEventListener('click', window.closePhotoModal);
    modalPrevBtn?.addEventListener('click', () => navigatePhoto('prev'));
    modalNextBtn?.addEventListener('click', () => navigatePhoto('next'));
  
    // Close modal on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') window.closePhotoModal();
      if (e.key === 'ArrowLeft') navigatePhoto('prev');
      if (e.key === 'ArrowRight') navigatePhoto('next');
    });
  
    // Close modal when clicking outside the image
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) window.closePhotoModal();
    });
  });
</script> 