---
/**
 * Photo Modal Component
 * 
 * Provides a modal display for viewing photos in a larger format with navigation.
 * 
 * CSS Dependencies:
 * - styles/components/photo-gallery.css
 */
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import '../styles/components/photo-gallery.css';

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Photo Modal -->
<div class="photo-modal" id="photoModal">
  <div class="modal-overlay"></div>
  <button class="modal-close" aria-label={t('modal.close')}>Ã—</button>
  <button class="modal-nav prev" aria-label={t('modal.previousPhoto')}>&#60;</button>
  <button class="modal-nav next" aria-label={t('modal.nextPhoto')}>&#62;</button>
  <div class="modal-content">
    <img src="" alt="" oncontextmenu="return false;" />
    <p class="modal-caption"></p>
  </div>
</div>

<script>
  // Add type definitions for window methods
  declare global {
    interface Window {
      openPhotoModal: (index: number) => void;
      closePhotoModal: () => void;
      navigatePhotoModal: (direction: 'prev' | 'next') => void;
    }
  }

  // Photo Gallery Modal Functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('photoModal') as HTMLElement;
    const modalOverlay = modal?.querySelector('.modal-overlay') as HTMLElement;
    const modalImg = modal?.querySelector('img') as HTMLImageElement;
    const modalCaption = modal?.querySelector('.modal-caption') as HTMLElement;
    const modalCloseBtn = modal?.querySelector('.modal-close') as HTMLButtonElement;
    const modalPrevBtn = modal?.querySelector('.modal-nav.prev') as HTMLButtonElement;
    const modalNextBtn = modal?.querySelector('.modal-nav.next') as HTMLButtonElement;
    
    if (!modal || !modalImg || !modalCloseBtn || !modalPrevBtn || !modalNextBtn) {
      console.error('Photo modal elements not found');
      return;
    }
    
    let currentIndex = 0;
    let photoItems: NodeListOf<Element>;
  
    window.openPhotoModal = function(index) {
      // Get the photo items - do this at open time to ensure we have the latest list
      photoItems = document.querySelectorAll('.photo-carousel-item');
      if (index >= photoItems.length) return;
      
      currentIndex = index;
      const photoItem = photoItems[index];
      const photoImg = photoItem.querySelector('img');
      
      if (!photoImg) return;
      
      // Set modal image source and alt
      modalImg.src = photoImg.src;
      modalImg.alt = photoImg.alt || `Photo ${index + 1}`;
      
      // Get caption if available
      const caption = photoItem.getAttribute('data-caption') || 
                      photoImg.getAttribute('data-caption') || 
                      photoItem.querySelector('.photo-caption')?.textContent || '';
      
      modalCaption.textContent = caption;
      modalCaption.style.display = caption ? 'block' : 'none';
      
      // Show modal
      modal.classList.add('active');
      document.body.style.overflow = 'hidden'; // Prevent scrolling
      
      // Update navigation buttons
      updateNavButtons();
      
      // Show nav buttons initially, then hide after delay
      showNavButtons();
      startNavButtonTimer();
    }
    
    window.navigatePhotoModal = function(direction) {
      if (!photoItems || !photoItems.length) return;
      
      if (direction === 'prev') {
        currentIndex = currentIndex > 0 ? currentIndex - 1 : photoItems.length - 1;
      } else {
        currentIndex = currentIndex < photoItems.length - 1 ? currentIndex + 1 : 0;
      }
      
      window.openPhotoModal(currentIndex);
      
      // Show nav buttons when navigating
      showNavButtons();
      startNavButtonTimer();
    }
  
    window.closePhotoModal = function() {
      modal.classList.remove('active');
      document.body.style.overflow = ''; // Re-enable scrolling
      
      // Clear image source to stop any video/audio
      setTimeout(() => {
        modalImg.src = '';
        modalCaption.textContent = '';
      }, 300);
    }
    
    function updateNavButtons() {
      // For circular navigation, we don't disable buttons anymore
      modalPrevBtn.disabled = false;
      modalNextBtn.disabled = false;
    }
    
    // Show navigation buttons
    function showNavButtons() {
      modalPrevBtn.classList.add('visible');
      modalNextBtn.classList.add('visible');
    }
    
    // Hide navigation buttons after timeout
    let navButtonTimer: number;
    function startNavButtonTimer() {
      clearTimeout(navButtonTimer);
      navButtonTimer = window.setTimeout(() => {
        modalPrevBtn.classList.remove('visible');
        modalNextBtn.classList.remove('visible');
      }, 2000);
    }
    
    // Show navigation on mouse movement
    modal.addEventListener('mousemove', () => {
      showNavButtons();
      startNavButtonTimer();
    });
  
    // Event Listeners
    modalCloseBtn.addEventListener('click', window.closePhotoModal);
    modalOverlay.addEventListener('click', window.closePhotoModal);
    modalPrevBtn.addEventListener('click', () => window.navigatePhotoModal('prev'));
    modalNextBtn.addEventListener('click', () => window.navigatePhotoModal('next'));
  
    // Close modal on escape key, navigate with arrow keys
    document.addEventListener('keydown', (e) => {
      if (!modal.classList.contains('active')) return;
      
      if (e.key === 'Escape') window.closePhotoModal();
      if (e.key === 'ArrowLeft') window.navigatePhotoModal('prev');
      if (e.key === 'ArrowRight') window.navigatePhotoModal('next');
    });
  
    // Close modal when clicking outside the image
    modal.addEventListener('click', (e) => {
      if (e.target === modal) window.closePhotoModal();
    });
    
    // Add touch swipe support for mobile
    let touchStartX = 0;
    let touchEndX = 0;
    
    const handleSwipe = () => {
      const swipeThreshold = 50;
      const swipeDistance = touchEndX - touchStartX;
      
      if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
          // Swipe right - go to previous photo
          window.navigatePhotoModal('prev');
        } else {
          // Swipe left - go to next photo
          window.navigatePhotoModal('next');
        }
      }
    };
    
    const modalContent = modal.querySelector('.modal-content') as HTMLElement;
    if (modalContent) {
      modalContent.addEventListener('touchstart', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchStartX = e.changedTouches[0].screenX;
          
          // Show navigation buttons on touch start
          showNavButtons();
        }
      }, { passive: true });
      
      modalContent.addEventListener('touchend', (e) => {
        if (e instanceof TouchEvent && e.changedTouches) {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }
      }, { passive: true });
    }
  });
</script>

<style>
  /* Photo Modal Styles */
  .photo-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity var(--transition-base), visibility var(--transition-base);
  }
  
  .photo-modal.active {
    opacity: 1;
    visibility: visible;
  }
  
  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000;
    opacity: 0.95;
    cursor: pointer;
  }
  
  .modal-close {
    position: absolute;
    top: 20px;
    right: 20px;
    width: 30px;
    height: 30px;
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.5rem;
    cursor: pointer;
    z-index: 1010;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color var(--transition-fast);
    opacity: 0.6;
  }
  
  .modal-close:hover {
    color: white;
    opacity: 1;
  }
  
  .modal-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.3);
    font-size: 1.5rem;
    font-weight: 200;
    width: 40px;
    height: 60px;
    cursor: pointer;
    z-index: 1010;
    opacity: 0;
    transition: opacity var(--transition-fast), color var(--transition-fast);
  }
  
  .modal-nav.visible {
    opacity: 0.3;
  }
  
  .modal-nav:hover {
    color: rgba(255, 255, 255, 0.6);
    opacity: 0.5 !important;
  }
  
  .modal-nav.prev {
    left: 20px;
  }
  
  .modal-nav.next {
    right: 20px;
  }
  
  .modal-content {
    position: relative;
    max-width: 90%;
    max-height: 90%;
    z-index: 1005;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .modal-content img {
    max-width: 100%;
    max-height: 85vh;
    object-fit: contain;
    display: block;
    user-select: none;
    pointer-events: none;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.3);
  }
  
  .modal-caption {
    color: var(--color-white);
    text-align: center;
    margin-top: var(--spacing-md);
    font-size: var(--font-size-sm);
    max-width: 90%;
    opacity: 0.8;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .modal-nav {
      font-size: 1.2rem;
      width: 30px;
    }
    
    .modal-close {
      top: 15px;
      right: 15px;
      font-size: 1.25rem;
    }
    
    .modal-content img {
      max-height: 80vh;
    }
  }
  
  @media (max-width: 480px) {
    .modal-nav {
      font-size: 1rem;
      width: 25px;
    }
    
    .modal-nav.prev {
      left: 10px;
    }
    
    .modal-nav.next {
      right: 10px;
    }
  }
</style> 