---
// Photo Modal Component
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import '../styles/photo-gallery.css';

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Photo Modal -->
<div class="photo-modal" id="photoModal">
  <button class="modal-close" aria-label={t('modal.close')}>Ã—</button>
  <button class="modal-nav prev" aria-label={t('modal.previousPhoto')}>&#60;</button>
  <button class="modal-nav next" aria-label={t('modal.nextPhoto')}>&#62;</button>
  <div class="modal-content">
    <img src="" alt="" oncontextmenu="return false;" />
    <p class="modal-caption"></p>
  </div>
</div>

<script>
  // Add type definitions for window methods
  declare global {
    interface Window {
      openPhotoModal: (index: number) => void;
      closePhotoModal: () => void;
      navigatePhotoModal: (direction: 'prev' | 'next') => void;
    }
  }

  // Photo Gallery Modal Functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('photoModal') as HTMLElement;
    const modalImg = modal?.querySelector('img') as HTMLImageElement;
    const modalCaption = modal?.querySelector('.modal-caption') as HTMLElement;
    const modalCloseBtn = modal?.querySelector('.modal-close') as HTMLButtonElement;
    const modalPrevBtn = modal?.querySelector('.modal-nav.prev') as HTMLButtonElement;
    const modalNextBtn = modal?.querySelector('.modal-nav.next') as HTMLButtonElement;
    
    if (!modal || !modalImg || !modalCloseBtn || !modalPrevBtn || !modalNextBtn) {
      console.error('Photo modal elements not found');
      return;
    }
    
    let currentIndex = 0;
    let photoItems: NodeListOf<Element>;
  
    window.openPhotoModal = function(index) {
      // Get the photo items - do this at open time to ensure we have the latest list
      photoItems = document.querySelectorAll('.photo-carousel-item');
      if (index >= photoItems.length) return;
      
      currentIndex = index;
      const photoItem = photoItems[index];
      const photoImg = photoItem.querySelector('img');
      
      if (!photoImg) return;
      
      // Set modal image source and alt
      modalImg.src = photoImg.src;
      modalImg.alt = photoImg.alt || `Photo ${index + 1}`;
      
      // Get caption if available
      const caption = photoItem.getAttribute('data-caption') || 
                      photoImg.getAttribute('data-caption') || 
                      photoItem.querySelector('.photo-caption')?.textContent || '';
      
      modalCaption.textContent = caption;
      modalCaption.style.display = caption ? 'block' : 'none';
      
      // Show modal
      modal.classList.add('active');
      document.body.style.overflow = 'hidden'; // Prevent scrolling
      
      // Update navigation buttons
      updateNavButtons();
    }
    
    window.navigatePhotoModal = function(direction) {
      if (!photoItems || !photoItems.length) return;
      
      if (direction === 'prev') {
        currentIndex = currentIndex > 0 ? currentIndex - 1 : photoItems.length - 1;
      } else {
        currentIndex = currentIndex < photoItems.length - 1 ? currentIndex + 1 : 0;
      }
      
      window.openPhotoModal(currentIndex);
    }
  
    window.closePhotoModal = function() {
      modal.classList.remove('active');
      document.body.style.overflow = ''; // Re-enable scrolling
      
      // Clear image source to stop any video/audio
      setTimeout(() => {
        modalImg.src = '';
        modalCaption.textContent = '';
      }, 300);
    }
    
    function updateNavButtons() {
      // For circular navigation, we don't disable buttons anymore
      modalPrevBtn.disabled = false;
      modalNextBtn.disabled = false;
    }
  
    // Event Listeners
    modalCloseBtn.addEventListener('click', window.closePhotoModal);
    modalPrevBtn.addEventListener('click', () => window.navigatePhotoModal('prev'));
    modalNextBtn.addEventListener('click', () => window.navigatePhotoModal('next'));
  
    // Close modal on escape key, navigate with arrow keys
    document.addEventListener('keydown', (e) => {
      if (!modal.classList.contains('active')) return;
      
      if (e.key === 'Escape') window.closePhotoModal();
      if (e.key === 'ArrowLeft') window.navigatePhotoModal('prev');
      if (e.key === 'ArrowRight') window.navigatePhotoModal('next');
    });
  
    // Close modal when clicking outside the image
    modal.addEventListener('click', (e) => {
      if (e.target === modal) window.closePhotoModal();
    });
  });
</script> 