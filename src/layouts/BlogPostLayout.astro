---
/**
 * Blog Post Layout
 * 
 * Layout component for individual blog posts with multilingual support.
 */
import MainLayout from './MainLayout.astro';
import { getLangFromUrl, useTranslations, languages } from '../i18n/utils';
import type { CollectionEntry } from 'astro:content'; // Import type for safety
import { getCollection } from 'astro:content';
import '../styles/blog.css';

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Access the entire post object from props
const { post } = Astro.props as { post: CollectionEntry<"blog"> };

// Safely access frontmatter data from post.data
const postData = post?.data; // Use optional chaining here too

// Check if postData exists before accessing properties
const title = postData?.title ?? 'Untitled Post';
const description = postData?.description ?? '';
const heroImage = postData?.heroImage;
// Fix hero image path to ensure it works
const absoluteHeroImage = heroImage 
  ? (heroImage.startsWith('http') ? heroImage : new URL(heroImage, Astro.url).href)
  : undefined;
console.log('Hero image path:', absoluteHeroImage); // Debug log
const translationKey = postData?.translationKey || '';

// Simplified author details - just name
const authorName = "Ricardo";

// Calculate read time
function getReadingTime(content: string, wordsPerMinute = 200): number {
  if (!content) return 1;
  const clean = content.replace(/<\/?[^>]+(>|$)/g, '');
  const words = clean.split(/\s+/).length;
  return Math.max(1, Math.ceil(words / wordsPerMinute));
}

const content = post?.body || '';
const readingTimeMin = getReadingTime(content);
const readingTimeText = readingTimeMin + ' ' + t('blog.readingTime');

// === Stricter Date Check ===
let pubDate: Date | undefined = undefined;
let formattedDate: string = 'Date not available';
let pubDateISO: string | undefined = undefined;
let formattedDisplayDate: string = '';

if (postData?.pubDate && postData.pubDate instanceof Date) {
  pubDate = postData.pubDate;
  try {
    // Format for display in the body (localized)
    formattedDate = new Date(pubDate).toLocaleDateString(
      lang === 'en' ? 'en-US' : lang === 'pt' ? 'pt-PT' : 'es-ES', 
      { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      }
    );
    
    // Format for the "Posted by" section (yyyy-mm-dd)
    formattedDisplayDate = pubDate.toISOString().split('T')[0]; // YYYY-MM-DD format
    
    pubDateISO = pubDate.toISOString();
  } catch (e) {
    console.error(`Error formatting date for post slug ${post?.slug}:`, e);
    formattedDate = 'Invalid Date'; // Set fallback on error
    pubDateISO = undefined;
    pubDate = undefined; // Mark pubDate as invalid if formatting fails
  }
} else if (postData?.pubDate) {
  // Log if pubDate exists but is not a Date object (should have been caught by filter)
  console.warn(`[BlogPostLayout] pubDate exists for slug ${post?.slug} but is not a Date object:`, postData.pubDate);
}
// === End Stricter Date Check ===

// Find the corresponding post in other languages using the translationKey
const allBlogPosts = await getCollection('blog');
let alternateLanguageUrls: Record<string, string> = {};

if (translationKey) {
  try {
    // Use the languages object from i18n utils instead of environment variables
    for (const langCode of Object.keys(languages)) {
      if (langCode !== lang) {
        const matchingPost = allBlogPosts.find(p => 
          p.data.translationKey === translationKey && 
          p.data.language === langCode
        );
        
        if (matchingPost) {
          alternateLanguageUrls[langCode] = `/${langCode}/blog/${translationKey}/`;
        }
      }
    }
  } catch (error) {
    console.error('Error finding matching posts:', error);
  }
}

// Prepare structured data for the blog post
const structuredDataBlogPost = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "image": absoluteHeroImage,
  "datePublished": pubDateISO,
  "author": {
    "@type": "Person",
    "name": authorName
  },
  "publisher": {
    "@type": "Person",
    "name": authorName
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  },
  "inLanguage": lang
};

// Create absolute URL for sharing
const absoluteUrl = `${Astro.url.origin}${Astro.url.pathname}`;
---

<MainLayout 
  title={`${title} | Ricardo Almeida`}
  description={description}
  image={absoluteHeroImage}
  currentLanguage={lang}
  alternateLanguageUrls={alternateLanguageUrls}
>
  <script is:inline type="application/ld+json">
    {JSON.stringify(structuredDataBlogPost)}
  </script>
  
  <main class="blog-post-container">
    <article class="blog-post">
      <div class="post-meta">
        <div class="post-author-date">
          {t('blog.postedBy')}
          <span class="author-name">{authorName}</span>
          {pubDate && (
            <span class="post-date">
              , {formattedDisplayDate}
            </span>
          )}
        </div>
      </div>
      
      <div class="post-header">
        <h1 class="post-title">{title}</h1>
        <div class="reading-time">{readingTimeText}</div>
      </div>
      
      {heroImage && (
        <div class="post-hero-image">
          <img 
            src={absoluteHeroImage} 
            alt={`Cover image for ${title}`}
            width="100%"
            height="auto"
            loading="eager"
            style="display: block; max-width: 100%;"
          />
        </div>
      )}
      
      <div class="post-content">
        <slot />
      </div>
      
      <div class="post-footer">
        <div class="post-footer-content">
          <a href={`/${lang}/blog/`} class="back-link">
            {t('blog.back')}
          </a>
          
          <div class="social-share">
            <p class="share-text">{t('blog.shareText')}:</p>
            <div class="share-buttons">
              <!-- X/Twitter Share Button -->
              <a 
                href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(absoluteUrl)}`} 
                target="_blank" 
                rel="noopener noreferrer"
                class="share-button twitter"
                aria-label={t('blog.shareOnX')}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                </svg>
              </a>
              
              <!-- LinkedIn Share Button -->
              <a 
                href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(absoluteUrl)}&title=${encodeURIComponent(title)}&summary=${encodeURIComponent(description)}`} 
                target="_blank" 
                rel="noopener noreferrer"
                class="share-button linkedin"
                aria-label={t('blog.shareOnLinkedIn')}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                  <rect x="2" y="9" width="4" height="12"></rect>
                  <circle cx="4" cy="4" r="2"></circle>
                </svg>
              </a>
              
              <!-- Facebook Share Button -->
              <a 
                href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(absoluteUrl)}&quote=${encodeURIComponent(title)}`} 
                target="_blank" 
                rel="noopener noreferrer"
                class="share-button facebook"
                aria-label={t('blog.shareOnFacebook')}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </article>
  </main>
</MainLayout> 