---
/**
 * Main Layout Component
 * 
 * This layout sets up the basic structure for all pages on the site,
 * including global styles and meta tags.
 */
import { getLangFromUrl, useTranslations, getLocalizedUrl, languages, defaultLang, getProfileStrings, languageNames } from '../i18n/utils';
// Import global styles
import '../styles/global.css';
// Import ThemeToggle component
import ThemeToggle from '../components/ThemeToggle.astro';
// Import language dropdown styles
import '../styles/components/language-dropdown.css';

const { 
  title, 
  description, 
  image, 
  canonical, 
  hideLangSelector = false, 
  currentLanguage, 
  alternateLanguageUrl,
  alternateLanguageUrls = {}  // New prop for blog posts with translations
} = Astro.props;

// Get language and translations
const lang = currentLanguage || getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Conditional debug logging
const isDev = import.meta.env.DEV;
const debugLog = (...args: any[]) => {
  if (isDev) {
    console.log(...args);
  }
};

// Debug logging
debugLog('MainLayout - Current URL:', Astro.url.pathname);
debugLog('MainLayout - Detected language:', lang);
debugLog('MainLayout - Available languages:', Object.keys(languages));
debugLog('MainLayout - Available language names:', languageNames);

// Load profile-based translations with error handling
let profileData = {}; // Initialize with an empty object
try {
  profileData = await getProfileStrings(lang) || {};
  debugLog('MainLayout - Profile data loaded successfully');
} catch (error) {
  console.error('Error loading profile data:', error);
  // profileData is already initialized as empty object
}

// Ensure lang is a valid language code
const validLang = lang in languages ? lang : defaultLang;
debugLog('MainLayout - Using language:', validLang, validLang !== lang ? '(fallback from ' + lang + ')' : '');

// Default meta values from profile data
const defaultTitle = profileData['site.title'] || t('site.title');
const defaultDescription = profileData['site.description'] || t('site.description');
const defaultImage = "/images/profile-cover.jpg";
const siteUrl = "https://me.ricbits.cc";

// Prepare alternate language URLs for language switcher
const otherLangs = Object.keys(languages).filter(l => l !== validLang);
debugLog('MainLayout - Other languages for switcher:', otherLangs);

// Structured data for the page - placed after profileData is safely initialized
// @ts-ignore - This is used in the script tag below via JSON.stringify
const _structuredData = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": profileData['site.author'] || "Ricardo Almeida",
  "url": "https://me.ricbits.cc",
  "jobTitle": profileData['jsonld.jobTitle'] || t('jsonld.jobTitle'),
  "worksFor": {
    "@type": "Organization",
    "name": profileData['jsonld.organization'] || t('jsonld.organization')
  },
  "description": profileData['jsonld.description'] || t('jsonld.description'),
  "skills": profileData['jsonld.skills'] || t('jsonld.skills'),
  "image": "/images/profile-cover.jpg",
  "sameAs": [
    "https://www.linkedin.com/in/ricardodpa"
  ]
};
---

<!DOCTYPE html>
<html lang={validLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    
    <!-- Primary Meta Tags -->
    <title>{title || defaultTitle}</title>
    <meta name="title" content={title || defaultTitle} />
    <meta name="description" content={description || defaultDescription} />
    <meta name="author" content={profileData['site.author'] || "Ricardo Almeida"} />
    <meta name="keywords" content={profileData['site.keywords'] || ""} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical || siteUrl} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical || siteUrl} />
    <meta property="og:title" content={title || defaultTitle} />
    <meta property="og:description" content={description || defaultDescription} />
    <meta property="og:image" content={image || defaultImage} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical || siteUrl} />
    <meta property="twitter:title" content={title || defaultTitle} />
    <meta property="twitter:description" content={description || defaultDescription} />
    <meta property="twitter:image" content={image || defaultImage} />
    
    <!-- Favicon -->
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    
    <!-- Google Fonts: Poppins for base text and Exo for titles -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&family=Exo:wght@400;500;700&display=swap" rel="stylesheet">
    
    <!-- RSS Feed Link (Language Specific) -->
    <link 
      rel="alternate" 
      type="application/rss+xml" 
      title={profileData['rss.title'] || "RSS Feed"} 
      href={`/${validLang}/rss.xml`} 
    />

    <!-- Alternate Language URLs -->
    {otherLangs.map(altLang => (
      <link 
        rel="alternate" 
        hreflang={altLang} 
        href={alternateLanguageUrls[altLang] || alternateLanguageUrl || getLocalizedUrl(Astro.url, altLang as keyof typeof languages)}
      />
    ))}
    <link rel="alternate" hreflang="x-default" href={`/${defaultLang}`} />

    <!-- Preload alternate language versions for faster switching -->
    {otherLangs.map(altLang => (
      <link 
        rel="prefetch" 
        href={alternateLanguageUrls[altLang] || alternateLanguageUrl || getLocalizedUrl(Astro.url, altLang as keyof typeof languages)}
        as="document"
      />
    ))}

    <!-- Add script to handle Sentry errors gracefully -->
    <script src="/scripts/sentry-handler.js" is:inline></script>

    <!-- Structured Data for Professional Profile -->
    <script is:inline type="application/ld+json">
      {JSON.stringify(_structuredData)}
    </script>

    <!-- Theme switcher setup script - must be in the head to avoid FOUC -->
    <script is:inline>
      // Apply saved theme on initial page load before DOM is ready to avoid FOUC
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Default to light mode (no class) unless explicitly saved as dark or system prefers dark
      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        document.documentElement.classList.add('dark-mode');
      } else {
        document.documentElement.classList.remove('dark-mode');
      }
      
      // Function to dynamically update favicon color based on theme
      function updateFaviconColor() {
        const isDarkMode = document.documentElement.classList.contains('dark-mode');
        const favicon = document.querySelector('link[rel="icon"]');
        if (favicon) {
          // Force favicon refresh by adding timestamp query parameter
          const currentSrc = favicon.href.split('?')[0];
          favicon.href = `${currentSrc}?theme=${isDarkMode ? 'dark' : 'light'}&t=${Date.now()}`;
        }
      }
      
      // Update favicon on initial load
      document.addEventListener('DOMContentLoaded', updateFaviconColor);
      
      // Create MutationObserver to watch for theme changes
      if (typeof MutationObserver !== 'undefined') {
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.attributeName === 'class') {
              updateFaviconColor();
            }
          });
        });
        
        // Start observing once DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
          observer.observe(document.documentElement, { attributes: true });
        });
      }
    </script>
  </head>
  <body>
    <!-- Deprecated positioning script - no longer needed -->
    <!-- <script is:inline>
      // Force enable pointer events on all elements
      document.documentElement.style.pointerEvents = 'auto';
      document.body.style.pointerEvents = 'auto';
    </script> -->
    <header>
      <div class="header-wrapper">
        <div class="nav-content">
          <a href={`/${validLang}/`} class="site-title">
            <img src="/favicon.svg" alt="Ricbits" class="site-logo" />
          </a>

          <nav class="main-nav" id="main-nav">
            <div class="nav-container">
              <ul>
                <li><a href={`/${validLang}/blog`} class={Astro.url.pathname.includes(`/${validLang}/blog`) ? 'active' : ''}>{t('nav.blog')}</a></li>
                <li><a href={`/${validLang}/about`} class={Astro.url.pathname.includes(`/${validLang}/about`) ? 'active' : ''}>{t('nav.about')}</a></li>
                <li><a href={`/${validLang}/hobbies`} class={Astro.url.pathname.includes(`/${validLang}/hobbies`) || Astro.url.pathname.includes(`/${validLang}/side-projects`) ? 'active' : ''}>{t('nav.sideProjects')}</a></li>
              </ul>
            </div>
          </nav>

          <!-- Mobile menu toggle - Now a direct child for mobile layout -->
          <button id="mobile-menu-toggle" class="mobile-menu-toggle" aria-label={t('nav.toggleMenu')} aria-expanded="false">
            <span class="menu-icon"></span>
          </button>

          <!-- Group remaining right-side controls -->
          <div class="header-right-controls">
            <ThemeToggle 
              lightModeText={t('themeToggle.switchToLight')}
              darkModeText={t('themeToggle.switchToDark')}
            />
            
            {!hideLangSelector && (
              <div class="language-dropdown-container">
                <div class="language-dropdown">
                  <button class="dropdown-button">
                    {validLang.toUpperCase()}
                    <span class="dropdown-arrow">▼</span>
                  </button>
                  <div class="dropdown-content">
                    {Object.entries(languages).map(([code, name]) => {
                      // Calculate the URL for this language
                      let langUrl: string;
                      
                      if (code === validLang) {
                        langUrl = '#';
                      } else {
                        // Check if this is a blog post and has alternate URLs
                        const isBlogPost = Astro.url.pathname.includes('/blog/') && !/\/blog\/?$/.test(Astro.url.pathname);
                        
                        if (isBlogPost) {
                          // If we have an alternate URL for this language, use it
                          if (alternateLanguageUrls[code]) {
                            langUrl = alternateLanguageUrls[code];
                          } else {
                            // Otherwise redirect to the blog index of the target language
                            langUrl = `/${code}/blog/`;
                          }
                        } else {
                          // Special case for English to ensure it works correctly
                          if (code === 'en') {
                            // For English, explicitly use /en/ path
                            langUrl = Astro.url.pathname.startsWith('/en/') 
                              ? Astro.url.pathname 
                              : '/en/' + Astro.url.pathname.replace(/^\/[^\/]+\//, '');
                          } else {
                            // Normal case for other languages
                            langUrl = alternateLanguageUrl || getLocalizedUrl(Astro.url, code);
                          }
                        }
                      }
                        
                      return (
                        <a 
                          href={langUrl}
                          class={`dropdown-item ${code === validLang ? 'active' : ''}`}
                          aria-label={t('lang.switchTo').replace('{0}', name || code.toUpperCase())}
                          data-lang-link={code}
                          data-lang-active={code === validLang ? "true" : "false"}
                          data-testid={`lang-link-${code}`}
                        >
                          {(['zh', 'ja', 'ko', 'ar', 'hi', 'bn', 'ru', 'uk', 'el', 'th', 'he'].includes(code)) 
                            ? languageNames[code]?.charAt(0) || code.toUpperCase() 
                            : code.toUpperCase()}
                        </a>
                      );
                    })}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
    
    <slot />
    
    <footer>
      <div class="container">
        <p class="footer-text">{t('footer.copyright')}</p>
      </div>
    </footer>

    <script is:inline src="/scripts/language-switcher.js" defer></script>
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function() {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mainNav = document.getElementById('main-nav');
        const languageDropdown = document.querySelector('.language-dropdown');
        
        if (mobileMenuToggle && mainNav) {
          mobileMenuToggle.addEventListener('click', function() {
            const expanded = this.getAttribute('aria-expanded') === 'true';
            this.setAttribute('aria-expanded', !expanded);
            mainNav.classList.toggle('active');
            this.classList.toggle('active');
            
            // Close language dropdown when opening menu (mobile only)
            if (window.innerWidth <= 480 && languageDropdown) {
              // We need to force-close the dropdown that's shown on hover
              // Add a class we can target with CSS
              languageDropdown.classList.remove('dropdown-open');
              languageDropdown.classList.add('dropdown-closed');
              
              // Remove the force-closed class after transition
              setTimeout(() => {
                languageDropdown.classList.remove('dropdown-closed');
              }, 300);
            }
          });
        }
        
        // Add click listener to language dropdown button (mobile only)
        if (languageDropdown) {
          const dropdownButton = languageDropdown.querySelector('.dropdown-button');
          
          if (dropdownButton) {
            dropdownButton.addEventListener('click', function(e) {
              // Only on mobile
              if (window.innerWidth <= 480) {
                // Toggle dropdown open/closed state with class
                languageDropdown.classList.toggle('dropdown-open');
                
                // Close the mobile menu if it's open
                if (mainNav && mainNav.classList.contains('active') && mobileMenuToggle) {
                  mainNav.classList.remove('active');
                  mobileMenuToggle.classList.remove('active');
                  mobileMenuToggle.setAttribute('aria-expanded', 'false');
                }
                
                // Prevent the click from bubbling up to body
                e.stopPropagation();
              }
            });
            
            // Close dropdown when clicking anywhere else on the page
            document.body.addEventListener('click', function() {
              if (window.innerWidth <= 480 && languageDropdown.classList.contains('dropdown-open')) {
                languageDropdown.classList.remove('dropdown-open');
              }
            });
            
            // Prevent clicks inside dropdown from closing it
            languageDropdown.addEventListener('click', function(e) {
              if (window.innerWidth <= 480) {
                e.stopPropagation();
              }
            });
          }
        }
      });
    </script>
  </body>
</html>