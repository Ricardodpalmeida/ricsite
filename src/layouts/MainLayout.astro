---
/**
 * Main Layout Component
 * 
 * This layout sets up the basic structure for all pages on the site,
 * including global styles and meta tags.
 */
import { getLangFromUrl, useTranslations, getLocalizedUrl, languages, defaultLang, getProfileStrings, languageNames } from '../i18n/utils';
// Import global styles
import '../styles/global.css';

const { 
  title, 
  description, 
  image, 
  canonical, 
  hideLangSelector = false, 
  currentLanguage, 
  alternateLanguageUrl,
  alternateLanguageUrls = {}  // New prop for blog posts with translations
} = Astro.props;

// Get language and translations
const lang = currentLanguage || getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Conditional debug logging
const isDev = import.meta.env.DEV;
const debugLog = (...args: any[]) => {
  if (isDev) {
    console.log(...args);
  }
};

// Debug logging
debugLog('MainLayout - Current URL:', Astro.url.pathname);
debugLog('MainLayout - Detected language:', lang);
debugLog('MainLayout - Available languages:', Object.keys(languages));
debugLog('MainLayout - Available language names:', languageNames);

// Load profile-based translations with error handling
let profileData = {}; // Initialize with an empty object
try {
  profileData = await getProfileStrings(lang) || {};
  debugLog('MainLayout - Profile data loaded successfully');
} catch (error) {
  console.error('Error loading profile data:', error);
  // profileData is already initialized as empty object
}

// Ensure lang is a valid language code
const validLang = lang in languages ? lang : defaultLang;
debugLog('MainLayout - Using language:', validLang, validLang !== lang ? '(fallback from ' + lang + ')' : '');

// Default meta values from profile data
const defaultTitle = profileData['site.title'] || t('site.title');
const defaultDescription = profileData['site.description'] || t('site.description');
const defaultImage = "/images/profile-cover.jpg";
const siteUrl = "https://me.ricbits.cc";

// Prepare alternate language URLs for language switcher
const otherLangs = Object.keys(languages).filter(l => l !== validLang);
debugLog('MainLayout - Other languages for switcher:', otherLangs);

// Structured data for the page - placed after profileData is safely initialized
// @ts-ignore - This is used in the script tag below via JSON.stringify
const _structuredData = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": profileData['site.author'] || "Ricardo Almeida",
  "url": "https://me.ricbits.cc",
  "jobTitle": profileData['jsonld.jobTitle'] || t('jsonld.jobTitle'),
  "worksFor": {
    "@type": "Organization",
    "name": profileData['jsonld.organization'] || t('jsonld.organization')
  },
  "description": profileData['jsonld.description'] || t('jsonld.description'),
  "skills": profileData['jsonld.skills'] || t('jsonld.skills'),
  "image": "/images/profile-cover.jpg",
  "sameAs": [
    "https://www.linkedin.com/in/ricardodpa"
  ]
};
---

<!DOCTYPE html>
<html lang={validLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    
    <!-- Primary Meta Tags -->
    <title>{title || defaultTitle}</title>
    <meta name="title" content={title || defaultTitle} />
    <meta name="description" content={description || defaultDescription} />
    <meta name="author" content={profileData['site.author'] || "Ricardo Almeida"} />
    <meta name="keywords" content={profileData['site.keywords'] || ""} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical || siteUrl} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical || siteUrl} />
    <meta property="og:title" content={title || defaultTitle} />
    <meta property="og:description" content={description || defaultDescription} />
    <meta property="og:image" content={image || defaultImage} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical || siteUrl} />
    <meta property="twitter:title" content={title || defaultTitle} />
    <meta property="twitter:description" content={description || defaultDescription} />
    <meta property="twitter:image" content={image || defaultImage} />
    
    <!-- Favicon -->
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    
    <!-- Google Fonts: Switch to serif for small text and sans serif for headers -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Roboto+Slab:wght@400;500;700&display=swap" rel="stylesheet">
    
    <!-- RSS Feed Link (Language Specific) -->
    <link 
      rel="alternate" 
      type="application/rss+xml" 
      title={profileData['rss.title'] || "RSS Feed"} 
      href={`/${validLang}/rss.xml`} 
    />

    <!-- Alternate Language URLs -->
    {otherLangs.map(altLang => (
      <link 
        rel="alternate" 
        hreflang={altLang} 
        href={alternateLanguageUrls[altLang] || alternateLanguageUrl || getLocalizedUrl(Astro.url, altLang as keyof typeof languages)}
      />
    ))}
    <link rel="alternate" hreflang="x-default" href={`/${defaultLang}`} />

    <!-- Preload alternate language versions for faster switching -->
    {otherLangs.map(altLang => (
      <link 
        rel="prefetch" 
        href={alternateLanguageUrls[altLang] || alternateLanguageUrl || getLocalizedUrl(Astro.url, altLang as keyof typeof languages)}
        as="document"
      />
    ))}

    <!-- Add script to handle Sentry errors gracefully -->
    <script src="/scripts/sentry-handler.js" is:inline></script>

    <!-- Structured Data for Professional Profile -->
    <script is:inline type="application/ld+json">
      {JSON.stringify(_structuredData)}
    </script>
  </head>
  <body>
    <!-- Deprecated positioning script - no longer needed -->
    <!-- <script is:inline>
      // Force enable pointer events on all elements
      document.documentElement.style.pointerEvents = 'auto';
      document.body.style.pointerEvents = 'auto';
    </script> -->
    <header>
      <div class="header-wrapper">
        <div class="nav-content">
          <a href={`/${validLang}/`} class="site-title">
            <img src="/favicon.svg" alt="Ricbits" class="site-logo" />
          </a>

          <nav class="main-nav">
            <div class="nav-container">
              <ul>
                <li><a href={`/${validLang}/blog`} class={Astro.url.pathname.includes(`/${validLang}/blog`) ? 'active' : ''}>{t('nav.blog')}</a></li>
                <li><a href={`/${validLang}/about`} class={Astro.url.pathname.includes(`/${validLang}/about`) ? 'active' : ''}>{t('nav.about')}</a></li>
                <li><a href={`/${validLang}/side-projects`} class={Astro.url.pathname.includes(`/${validLang}/side-projects`) ? 'active' : ''}>{t('nav.sideProjects')}</a></li>
              </ul>
            </div>
          </nav>

          {!hideLangSelector && (
            <div class="language-dropdown-container">
              <div class="language-dropdown">
                <button class="dropdown-button">
                  {validLang.toUpperCase()}
                  <span class="dropdown-arrow">â–¼</span>
                </button>
                <div class="dropdown-content">
                  {Object.entries(languages).map(([code, name]) => {
                    // Calculate the URL for this language
                    let langUrl: string;
                    
                    if (code === validLang) {
                      langUrl = '#';
                    } else {
                      // Special case for English to ensure it works correctly
                      if (code === 'en') {
                        // For English, explicitly use /en/ path
                        langUrl = Astro.url.pathname.startsWith('/en/') 
                          ? Astro.url.pathname 
                          : '/en/' + Astro.url.pathname.replace(/^\/[^\/]+\//, '');
                      } else {
                        // Normal case for other languages
                        langUrl = alternateLanguageUrls[code] || alternateLanguageUrl || getLocalizedUrl(Astro.url, code);
                      }
                    }
                      
                    return (
                      <a 
                        href={langUrl}
                        class={`dropdown-item ${code === validLang ? 'active' : ''}`}
                        aria-label={t('lang.switchTo').replace('{0}', name || code.toUpperCase())}
                        data-lang-link={code}
                        data-testid={`lang-link-${code}`}
                      >
                        {(['zh', 'ja', 'ko', 'ar', 'hi', 'bn', 'ru', 'uk', 'el', 'th', 'he'].includes(code)) 
                          ? languageNames[code]?.charAt(0) || code.toUpperCase() 
                          : code.toUpperCase()}
                      </a>
                    );
                  })}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </header>
    
    <slot />
    
    <footer>
      <div class="container">
        <p class="footer-text">{t('footer.copyright')}</p>
      </div>
    </footer>

    <script is:inline src="/scripts/language-switcher.js" defer></script>
  </body>
</html>